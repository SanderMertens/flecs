
#ifndef FLECS_H
#define FLECS_H

#include <time.h>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>

#ifndef __BAKE__
#include <stdint.h>
#endif

/* This file is generated by bake and contains macro's for 
 * importing/exporting symbols */
#include "flecs/bake_config.h"

/* The API uses the native bool type in C++, or a custom one in C */
#ifndef __cplusplus
#undef bool
#undef true
#undef false
typedef char bool;
#define false 0
#define true !false
#endif

#include "flecs/util/os_api.h"
#include "flecs/util/vector.h"
#include "flecs/util/ringbuf.h"
#include "flecs/util/sparse.h"
#include "flecs/util/map.h"
#include "flecs/util/strbuf.h"
#include "flecs/util/os_api.h"

#ifdef __cplusplus
extern "C" {
#endif


////////////////////////////////////////////////////////////////////////////////
//// Opaque types
////////////////////////////////////////////////////////////////////////////////

typedef struct ecs_world_t ecs_world_t;
typedef struct ecs_query_t ecs_query_t;
typedef struct ecs_stage_t ecs_stage_t;
typedef struct ecs_record_t ecs_record_t;
typedef struct ecs_table_t ecs_table_t;
typedef struct ecs_rows_t ecs_rows_t;
typedef struct ecs_reference_t ecs_reference_t;
typedef struct ecs_snapshot_t ecs_snapshot_t;


////////////////////////////////////////////////////////////////////////////////
//// Public types
////////////////////////////////////////////////////////////////////////////////

/* An entity identifier. */
typedef uint64_t ecs_entity_t;

/* A vector containing component identifiers used to describe an entity type. */
typedef const ecs_vector_t* ecs_type_t;

/* Trigger kinds enable specifying when a trigger is executed */
typedef enum ecs_trigger_kind_t {
    EcsOnAdd,
    EcsOnRemove,
    EcsOnSet    
} ecs_trigger_kind_t;

/** Action callback for systems and triggers */
typedef void (*ecs_iter_action_t)(
    ecs_rows_t *data);

/** Compare callback used for sorting */
typedef int (*ecs_compare_action_t)(
    ecs_entity_t e1,
    void *ptr1,
    ecs_entity_t e2,
    void *ptr2);    

/** Compare callback used for sorting */
typedef int32_t (*ecs_rank_type_action_t)(
    ecs_world_t *world,
    ecs_entity_t rank_component,
    ecs_type_t type);

/** Initialization action for modules */
typedef void (*ecs_module_action_t)(
    ecs_world_t *world,
    int flags);    

/** Types that describe a type filter.
 * Filters provide a quick mechanism to query entities or run operations on
 * entities of one or more types. Filters contain a components to include and
 * components to exclude. Additionally, a filter can specify whether all or any
 * of the components need to be matched, or whether it must be an exact match.
 *
 * When a filter contains only one component, Any and All are equivalent.
 *
 * Suppose an application has entities with the following types:
 * 1. [Position]
 * 2. [Position, Velocity]
 * 3. [Position, Velocity, Mass]
 *
 * And the following filters
 * A. include = [Position], All/Any
 * B. include = [Position], Exact
 * C. include = [Position, Velocity], All
 * D. include = [Position, Velocity], Any
 * E. exclude = [Position], All/Any
 * F. exclude = [Position, Velocity], Exact
 * G. include = [Position, Velocity], Exact
 *
 * Then these types would be matched like this:
 *     1   2   3
 * ---|---|---|---
 *  A | x | x | x
 *  B | x |   | 
 *  C |   | x | x
 *  D | x | x | x 
 *  E |   |   | 
 *  F | x |   | x 
 *  G |   | x | 
 *
 * When the kind is left to EcsMatchDefault, the include_kind will be set to
 * EcsMatchAll, while the exclude_kind will be set to EcsMatchAny.
 */
typedef enum ecs_match_kind_t {
    EcsMatchDefault = 0,
    EcsMatchAll,
    EcsMatchAny,
    EcsMatchExact
} ecs_match_kind_t;

typedef struct ecs_filter_t {
    ecs_type_t include;
    ecs_type_t exclude;
    ecs_match_kind_t include_kind;
    ecs_match_kind_t exclude_kind;
} ecs_filter_t;

typedef struct ecs_cached_ptr_t {
    void *table;            /* Last known table */
    int32_t row;            /* Last known location in table */
    int32_t size;           /* Last known size of table (data reallocd?) */
    ecs_stage_t *stage;     /* Last known stage */
    ecs_record_t *record;   /* Pointer to record, if in main stage */
    const void *ptr;        /* Cached ptr */
} ecs_cached_ptr_t;

/* Constructor/destructor. Used for initializing / deinitializing components */
typedef void (*ecs_xtor_t)(
    ecs_world_t *world,
    ecs_entity_t component,
    const ecs_entity_t *entity_ptr,
    void *ptr,
    size_t size,
    int32_t count,
    void *ctx);

/* Copy is invoked when a component is copied into another component */
typedef void (*ecs_copy_t)(
    ecs_world_t *world,
    ecs_entity_t component,    
    const ecs_entity_t *dst_entity,
    const ecs_entity_t *src_entity,
    void *dst_ptr,
    const void *src_ptr,
    size_t size,
    int32_t count,
    void *ctx);

/* Move is invoked when a component is moved to another component */
typedef void (*ecs_move_t)(
    ecs_world_t *world,
    ecs_entity_t component,
    const ecs_entity_t *dst_entity,
    const ecs_entity_t *src_entity,
    void *dst_ptr,
    void *src_ptr,
    size_t size,
    int32_t count,
    void *ctx);

/** The ecs_rows_t struct passes data from a system to a system callback.  */
struct ecs_rows_t {
    ecs_world_t *world;          /* Current world */
    ecs_entity_t system;         /* Handle to current system */

    int32_t *columns;    /* Indices mapping system params to columns and refs */
    int32_t table_count;        /* Number of tables matched with system */
    int32_t inactive_table_count; /* Number of inactive tables matched with system */
    uint16_t column_count;       /* Number of columns for system */
    void *table;                 /* Opaque structure with reference to table */
    void *table_columns;         /* Opaque structure with table column data */
    ecs_query_t *query;          /* Query being evaluated */
    ecs_reference_t *references; /* References to other entities */
    ecs_entity_t *components;    /* System-table specific list of components */
    ecs_entity_t *entities;      /* Entity row */

    void *param;                 /* Userdata passed to on-demand system */
    float delta_time;            /* Time elapsed since last frame */
    float delta_system_time;     /* Time elapsed since last system invocation */
    float world_time;            /* Time elapsed since start of simulation */
    int32_t frame_offset;       /* Offset relative to frame */
    int32_t table_offset;       /* Current active table being processed */
    int32_t offset;             /* Offset relative to current table */
    int32_t count;              /* Number of rows to process by system */

    ecs_entity_t interrupted_by; /* When set, system execution is interrupted */
};


////////////////////////////////////////////////////////////////////////////////
//// Public builtin components
////////////////////////////////////////////////////////////////////////////////

/** Component that contains an entity name */
typedef const char *EcsName;

/** Component that contains the size of a component */
typedef struct EcsComponent {
    size_t size;
} EcsComponent;

/** Metadata of an explicitly created type (ECS_TYPE or ecs_new_type) */
typedef struct EcsType {
    ecs_type_t type;        /* Preserved nested types */
    ecs_type_t normalized;  /* Resolved nested types */
} EcsType;

/* Component that contains lifecycle callbacks for a component */
typedef struct EcsComponentLifecycle {
    ecs_xtor_t ctor;
    ecs_xtor_t dtor;
    ecs_copy_t copy;
    ecs_move_t move;
    void *ctx;
} EcsComponentLifecycle;

/* Component used for registering component triggers */
typedef struct EcsTrigger {
    ecs_trigger_kind_t kind;
    ecs_iter_action_t action;
    ecs_entity_t component;
    ecs_entity_t self;
    void *ctx;
} EcsTrigger;

/* Component used for registering systems */
typedef struct EcsSystem {
    ecs_iter_action_t action;
    char *signature;
    ecs_entity_t pipeline;
    ecs_entity_t phase;
} EcsSystem;

/* Pipeline for runing systems */
typedef struct EcsPipeline {
    ecs_type_t phases;
} EcsPipeline;

/* Runtime properties of pipeline */
typedef struct EcsPipelineQuery {
    ecs_query_t *query;
    int32_t match_count;
    ecs_vector_t *ops;
} EcsPipelineQuery;

/** Component used for timer functionality */
typedef struct EcsTimer {
    float timeout;         /* Timer timeout period */
    float time;            /* Incrementing time value */
    int32_t fired_count;   /* Number of times ticked */
    bool active;           /* Is the timer active or not */
    bool single_shot;      /* Is this a single shot timer */
} EcsTimer;

/* Apply a rate filter to a tick source */
typedef struct EcsRateFilter {
    ecs_entity_t src;
    int32_t rate;
    int32_t tick_count;
    float time_elapsed;   /* Time elapsed since last tick */
} EcsRateFilter;

/* Component used to provide a tick source to systems */
typedef struct EcsTickSource {
    bool tick;           /* True if providing tick */
    float time_elapsed;  /* Time elapsed since last tick */
} EcsTickSource;

#include "flecs/util/api_support.h"


////////////////////////////////////////////////////////////////////////////////
//// Public constants
////////////////////////////////////////////////////////////////////////////////

/* Type flags are used to indicate the role of an entity in a type. No flag  
 * means a regular component / tag. */
#define ECS_INSTANCEOF ((ecs_entity_t)1 << 63)/* Share components with entity */
#define ECS_CHILDOF ((ecs_entity_t)1 << 62)   /* Entity is a parent */

/* The following type flags operate on a type entity, and add constraints to
 * what a type can and can't have. In this example 'Movable' MUST have either
 * Velocity or Speed, or creation of the type will fail.
 *
 * ECS_TYPE(world, SpeedType, Velocity, Speed);
 * ECS_TYPE(world, Movable, Position, XOR | SpeedType, Velocity);
 */
#define ECS_AND ((ecs_entity_t)1 << 61) /* All entities of type must be present */
#define ECS_OR ((ecs_entity_t)1 << 60)  /* At least one entity of type must be present */
#define ECS_XOR ((ecs_entity_t)1 << 59) /* Exactly one entity of type must be present */
#define ECS_NOT ((ecs_entity_t)1 << 58) /* None of the entities in the type can be added */

/** Type handles to builtin components */
FLECS_EXPORT
extern ecs_type_t 
    TEcsComponent,
    TEcsComponentLifecycle,
    TEcsTrigger,
    TEcsType,
    TEcsModule,
    TEcsPrefab,
    TEcsSystem,
    TEcsColSystem,
    TEcsName,
    TEcsHidden,
    TEcsDisabled,
    TEcsDisabledIntern,
    TEcsInactive,
    TEcsOnDemand,
    TEcsMonitor,
    TEcsPipeline,
    TEcsPipelineQuery,
    TEcsTimer,
    TEcsRateFilter,
    TEcsTickSource;

/** Handles to builtin components */
#define EEcsComponent (1)
#define EEcsComponentLifecycle (2)
#define EEcsTrigger (3)
#define EEcsType (4)
#define EEcsModule (5)
#define EEcsPrefab (6)
#define EEcsSystem (7)
#define EEcsColSystem (8)
#define EEcsName (9)
#define EEcsHidden (10)
#define EEcsDisabled (11)
#define EEcsDisabledIntern (12)
#define EEcsInactive (13)
#define EEcsOnDemand (14)
#define EEcsMonitor (15)
#define EEcsPipeline (17)
#define EEcsPipelineQuery (18)
#define EEcsTimer (19)
#define EEcsRateFilter (20)
#define EEcsTickSource (21)

/* Builtin pipeline tags */
#define EcsPreFrame (22)
#define EcsOnLoad (23)
#define EcsPostLoad (24)
#define EcsPreUpdate (25)
#define EcsOnUpdate (26)
#define EcsOnValidate (27)
#define EcsPostUpdate (28)
#define EcsPreStore (29)
#define EcsOnStore (30)
#define EcsPostFrame (31)

/** Builtin entity ids */
#define EcsWorld (32)
#define ECS_SINGLETON (EcsSingleton)

/** Value used to quickly check if component is builtin */
#define EcsLastInternal (EEcsColSystem)
#define EcsLastBuiltin (EEcsTickSource)

/** This allows passing 0 as type to functions that accept types */
#define T0 (0)


////////////////////////////////////////////////////////////////////////////////
//// Declarative macro's
////////////////////////////////////////////////////////////////////////////////

#ifndef __BAKE_LEGACY__

/** Declare a named entity.
 * This macro will declare a new entity with the provided id and components. The
 * components are specified as a comma-separated list of identifiers, optionally
 * with type flags. The order in which components are specified does not matter.
 *
 * Examples:
 * ECS_ENTITY(world, MyEntity, Position, Velocity);
 * ECS_ENTITY(world, MyEntity 0);
 * ECS_ENTITY(world, MyEntity, Position, Velocity, CHILDOF | MyParentEntity);
 */ 
#define ECS_ENTITY(world, id, ...)\
    ecs_entity_t id = ecs_new_entity(world, #id, #__VA_ARGS__);\
    (void)id;

/** Declare a prefab.
 * This macro will declare a new prefab with the provided id and components. The
 * order in which components are specified does not matter. A prefab is similar 
 * to an entity except that prefabs are typically used in combination with 
 * INSTANCEOF to serve as entity templates. Prefabs are by default not matched 
 * with systems.
 *
 * Examples:
 * ECS_PREFAB(world, MyPrefab, Position, Velocity);
 * ECS_PREFAB(world, MyPrefab, 0);
 * ECS_PREFAB(world, MyPrefab, Position, Velocity, INSTANCEOF | MyBasePrefab);
 *
 * Prefabs can be used with ECS_ENTITY:
 * ECS_ENTITY(world, MyEntity, Position, Velocity, INSTANCEOF | MyPrefab);
 */
#define ECS_PREFAB(world, id, ...) \
    ecs_entity_t id = ecs_new_prefab(world, #id, #__VA_ARGS__);\
    (void)id;

/** Declare a component.
 * This macro declares a new component with the provided type. The type must be 
 * a valid C type or typedef. A type must first be registered as a component 
 * before it can be added to entities.
 *
 * Example:
 * ECS_COMPONENT(world, Position);
 * 
 * Components can be used with ECS_ENTITY:
 * ECS_ENTITY(world, MyEntity, Position);
 */
#define ECS_COMPONENT(world, id) \
    ECS_ENTITY_VAR(id) = ecs_new_component(world, #id, sizeof(id));\
    ECS_TYPE_VAR(id) = ecs_type_from_entity(world, ecs_entity(id));\
    (void)ecs_entity(id);\
    (void)ecs_type(id);\

/** Declare a type.
 * This macro declares a type with the provided id and components. Types are
 * similar to components in that they can be added to an entity, but instead of
 * adding just one component, a type can add multiple components at once.
 * 
 * The components are specified as a comma-separated list of identifiers,
 * optionally with type flags.
 *
 * Examples:
 * ECS_ENTITY(world, MyType, Position, Velocity);
 * ECS_ENTITY(world, MyType 0);
 * ECS_ENTITY(world, MyType, Position, Velocity, CHILDOF | MyParentEntity);
 *
 * Types can be used in combination with ECS_ENTITY like this:
 *
 * ECS_ENTITY(world, MyEntity, Position, MyType);
 */
#define ECS_TYPE(world, id, ...) \
    ecs_entity_t id = ecs_new_type(world, #id, #__VA_ARGS__);\
    ECS_TYPE_VAR(id) = ecs_type_from_entity(world, id);\
    (void)id;\
    (void)ecs_type(id);\

/** Declare a systen.
 * This macro declares a system with the specified function, kind and signature. 
 * Systems are matched with entities that match the system signature. The system
 * signature is specified as a comma-separated list of column expressions, where
 * a column expression can be any of the following: 
 *
 * - A simple component identifier ('Position')
 * - An OR expression ('Position | Velocity')
 * - An optional expression ('?Position')
 * - A NOT expression ('!Position')
 * - An OWNED expression ('OWNED.Position')
 * - A SHARED expression ('SHARED.Position')
 * - A PARENT expression ('PARENT.Position')
 * - A CASCADE expression ('CASCADE.Position')
 * - An entity expression ('MyEntity.Position')
 * - An empty expression ('.Position')
 * 
 * The systen kind specifies the phase in which the system is ran.
 *
 * Examples:
 * ECS_SYSTEM(world, Move, EcsOnUpdate, Position, Velocity, !AngularVelocity);
 * ECS_SYSTEM(world, Transform, EcsPostUpdate, PARENT.Transform, Transform);
 *
 * In these examples, 'Move' and 'Transform' must be valid identifiers to a C
 * function of the following signature:
 *
 * void Move(ecs_rows_t *rows) { ... }
 *
 * Inside this function the system can access the data from the signature with
 * the ECS_COLUMN macro:
 *
 * ECS_COLUMN(rows, Position, p, 1);
 * ECS_COLUMN(rows, Velocity, v, 2);
 *
 * For more details on system signatures and phases see the Flecs manual.
 */

#define ECS_SYSTEM(world, name, kind, ...) \
    ecs_entity_t F##name = ecs_new_system(world, #name, kind, #__VA_ARGS__, name);\
    ecs_entity_t name = F##name;\
    (void)F##name;\
    (void)name;

#endif

#define ECS_TRIGGER(world, name, kind, component, ctx) \
    ecs_entity_t F##name = ecs_new_trigger(world, #name, kind, ecs_entity(component), name, ctx);\
    ecs_entity_t name = F##name;\
    (void)F##name;\
    (void)name;

////////////////////////////////////////////////////////////////////////////////
//// World API
////////////////////////////////////////////////////////////////////////////////

/** Create a new world.
 * A world manages all the ECS objects. Applications must have at least one
 * world. Entities, component and system handles are local to a world and
 * cannot be shared between worlds.
 *
 * @return A new world object
 */
FLECS_EXPORT
ecs_world_t* ecs_init(void);

/** Create a new world with arguments.
 * Same as ecs_init, but allows passing in command line arguments. These can be
 * used to dynamically enable flecs features to an application, like performance
 * monitoring or the web dashboard (if it is installed) without having to modify
 * the code of an application.
 * 
 * If the functionality requested by the arguments is not available, an error
 * message will be printed to stderr, but the function will not fail. Thus it is
 * important that the application code does not rely on any functionality that
 * is realized through the arguments.
 * 
 * If the arguments specify a setting that is explicity set as well by the
 * application, the application setting will be ignored. For example, if an
 * application specifies it will run on 2 threads, but an argument specify it
 * will run on 6 threads, the argument will take precedence.
 * 
 * The following options are available:
 * --threads [n]   Use n worker threads
 * --fps [hz]      Run at hz FPS
 * --admin [port]  Enable admin dashboard (requires flecs-systems-admin & flecs-systems-civetweb)
 * --console       Enables console (requires flecs-systems-console)
 * --debug         Enables debug tracing
 *
 * @return A new world object
 */
FLECS_EXPORT
ecs_world_t* ecs_init_w_args(
    int argc,
    char *argv[]);

/** Delete a world.
 * This operation deletes the world, and all entities, components and systems
 * within the world.
 *
 * @param world The world to delete.
 */
FLECS_EXPORT
int ecs_fini(
    ecs_world_t *world);

/** Signal exit
 * This operation signals that the application should quit. It will cause
 * ecs_progress to return false.
 *
 * @param world The world to quit.
 */
FLECS_EXPORT
void ecs_quit(
    ecs_world_t *world);

/** Progress a world.
 * This operation progresses the world by running all systems that are both
 * enabled and periodic on their matching entities.
 *
 * An application can pass a delta_time into the function, which is the time
 * passed since the last frame. This value is passed to systems so they can
 * update entity values proportional to the elapsed time since their last
 * invocation.
 *
 * When an application passes 0 to delta_time, ecs_progress will automatically
 * measure the time passed since the last frame. If an application does not uses
 * time management, it should pass a non-zero value for delta_time (1.0 is
 * recommended). That way, no time will be wasted measuring the time.
 *
 * @param world The world to progress.
 * @param delta_time The time passed since the last frame.
 * @return false if ecs_quit has been called, true otherwise.
 */
FLECS_EXPORT
bool ecs_progress(
    ecs_world_t *world,
    float delta_time);   

/** Set target frames per second (FPS) for application.
 * Setting the target FPS ensures that ecs_progress is not invoked faster than
 * the specified FPS. When enabled, ecs_progress tracks the time passed since
 * the last invocation, and sleeps the remaining time of the frame (if any).
 *
 * This feature ensures systems are ran at a consistent interval, as well as
 * conserving CPU time by not running systems more often than required.
 *
 * Note that ecs_progress only sleeps if there is time left in the frame. Both
 * time spent in flecs as time spent outside of flecs are taken into
 * account.
 *
 * @param world The world.
 * @param fps The target FPS.
 */
FLECS_EXPORT
void ecs_set_target_fps(
    ecs_world_t *world,
    float fps);

/** Get configured target frames per second.
 * This operation returns the FPS set with ecs_set_target_fps.
 * 
 * @param world The world.
 * @param return The current target FPS.
 */
FLECS_EXPORT
float ecs_get_target_fps(
    ecs_world_t *world);   

/** Get last delta time from world.
 * This operation returns the delta_time used in the last frame. If a non-zero
 * value was provided to ecs_progress then this value is returned, otherwise the
 * time measured by ecs_progress is returned.
 *
 * @param world The world.
 * @return The last used delta_time.
 */
FLECS_EXPORT
float ecs_get_delta_time(
    ecs_world_t *world);

/** Set a world context.
 * This operation allows an application to register custom data with a world
 * that can be accessed anywhere where the application has the world object.
 *
 * A typical usecase is to register a struct with handles to the application
 * entities, components and systems.
 *
 * @param world The world.
 * @param ctx A pointer to a user defined structure.
 */
FLECS_EXPORT
void ecs_set_context(
    ecs_world_t *world,
    void *ctx);

/** Get the world context.
 * This operation retrieves a previously set world context.
 *
 * @param world The world.
 * @return The context set with ecs_set_context. If no context was set, the
 *          function returns NULL.
 */
FLECS_EXPORT
void* ecs_get_context(
    ecs_world_t *world);

/** Get the world tick.
 * This operation retrieves the tick count (frame number). The tick count is 0
 * when ecs_process is called for the first time, and increases by one for every
 * subsequent call.
 *
 * @param world The world.
 * @return The current tick.
 */
FLECS_EXPORT
int32_t ecs_get_tick(
    ecs_world_t *world);

/** Dimension the world for a specified number of entities.
 * This operation will preallocate memory in the world for the specified number
 * of entities. Specifying a number lower than the current number of entities in
 * the world will have no effect.
 *
 * When using this operation, note that flecs uses entities for storing
 * systems, components and builtin components. For an exact calculation of
 * entities, do user_entity_count + component_count + system_count + 3. The 3
 * stands for the number of builtin components.
 *
 * Note that this operation does not allocate memory in tables. To preallocate
 * memory in a table, use ecs_dim_type. Correctly using these functions
 * prevents flecs from doing dynamic memory allocations in the main loop.
 *
 * @param world The world.
 * @param entity_count The number of entities to preallocate.
 */
FLECS_EXPORT
void ecs_dim(
    ecs_world_t *world,
    int32_t entity_count);

/** Dimension a type for a specified number of entities.
 * This operation will preallocate memory for a type (table) for the
 * specified number of entites. Specifying a number lower than the current
 * number of entities in the table will have no effect.
 *
 * If no table exists yet for this type (when no entities have been committed
 * for the type) it will be created, even if the entity_count is zero. This
 * operation can thus also be used to just preallocate empty tables.
 *
 * If the specified type is unknown, the behavior of this function is
 * unspecified. To ensure that the type exists, use ecs_type_get or
 * ECS_TYPE.
 *
 * @param world The world.
 * @param type Handle to the type, as obtained by ecs_type_get.
 * @param entity_count The number of entities to preallocate.
 */
FLECS_EXPORT
void ecs_dim_type(
    ecs_world_t *world,
    ecs_type_t type,
    int32_t entity_count);


/** Set a range for issueing new entity ids.
 * This function constrains the entity identifiers returned by ecs_new to the 
 * specified range. This operation can be used to ensure that multiple processes
 * can run in the same simulation without requiring a central service that
 * coordinates issueing identifiers.
 * 
 * If id_end is set to 0, the range is infinite. If id_end is set to a non-zero
 * value, it has to be larger than id_start. If id_end is set and ecs_new is
 * invoked after an id is issued that is equal to id_end, the application will
 * abort. Flecs does not automatically recycle ids.
 * 
 * The id_end parameter has to be smaller than the last issued identifier.
 * 
 * @param world The world.
 * @param id_start The start of the range.
 * @param id_end The end of the range.
 */
FLECS_EXPORT
void ecs_set_entity_range(
    ecs_world_t *world,
    ecs_entity_t id_start,
    ecs_entity_t id_end);

/** Temporarily enable/disable range limits.
 * When an application is both a receiver of range-limited entities and a
 * producer of range-limited entities, range checking needs to be temporarily
 * disabled when receiving entities.
 * 
 * Range checking is disabled on a stage, so setting this value is thread safe.
 */
FLECS_EXPORT
bool ecs_enable_range_check(
    ecs_world_t *world,
    bool enable);

/** Enable world locking while in progress.
 * When locking is enabled, Flecs will lock the world while in progress. This
 * allows applications to interact with the world from other threads without
 * running into race conditions.
 *
 * This is a better alternative to applications putting a lock around calls to
 * ecs_progress, since ecs_progress can sleep when FPS control is enabled,
 * which is time during which other threads could perform work.
 *
 * Locking must be enabled before applications can use the ecs_lock and
 * ecs_unlock functions. Locking is turned off by default.
 *
 * @param world The world.
 * @param enable True if locking is to be enabled.
 * @result The previous value of the setting.
 */
FLECS_EXPORT
bool ecs_enable_locking(
    ecs_world_t *world,
    bool enable);

/** Locks the world.
 * See ecs_enable_locking for details.
 */
FLECS_EXPORT
void ecs_lock(
    ecs_world_t *world);

/** Unlocks the world.
 * See ecs_enable_locking for details.
 */
FLECS_EXPORT
void ecs_unlock(
    ecs_world_t *world);

/** Tracing */
FLECS_EXPORT
void _ecs_trace(
    int level,
    const char *file,
    int32_t line,
    const char *fmt,
    ...);

#define ecs_trace(lvl, ...)\
    _ecs_trace(lvl, __FILE__, __LINE__, __VA_ARGS__)

FLECS_EXPORT
void ecs_trace_push(void);
void ecs_trace_pop(void);

FLECS_EXPORT
void ecs_tracing_enable(
    bool enabled);

#if !defined(NDEBUG) && !(defined(ECS_VERBOSITY_0) || defined(ECS_VERBOSITY_1) || defined(ECS_VERBOSITY_3))
#define ECS_VERBOSITY_2
#endif

#if defined(ECS_VERBOSITY_3)
#define ecs_trace_1(...) ecs_trace(1, __VA_ARGS__);
#define ecs_trace_2(...) ecs_trace(2, __VA_ARGS__);
#define ecs_trace_3(...) ecs_trace(3, __VA_ARGS__);

#elif defined(ECS_VERBOSITY_2)
#define ecs_trace_1(...) ecs_trace(1, __VA_ARGS__);
#define ecs_trace_2(...) ecs_trace(2, __VA_ARGS__);
#define ecs_trace_3(...)

#elif defined(ECS_VERBOSITY_1)
#define ecs_trace_1(...) ecs_trace(1, __VA_ARGS__);
#define ecs_trace_2(...)
#define ecs_trace_3(...)
#endif


////////////////////////////////////////////////////////////////////////////////
//// Entity API
////////////////////////////////////////////////////////////////////////////////


/* -- Create single entity -- */

FLECS_EXPORT
ecs_entity_t ecs_new_w_entity(
    ecs_world_t *world,
    ecs_entity_t component);

FLECS_EXPORT
ecs_entity_t ecs_new_w_type(
    ecs_world_t *world,
    ecs_type_t type);

#define ecs_new(world, type)\
    ecs_new_w_type(world, T##type)


/* -- Bulk create entities -- */

FLECS_EXPORT
ecs_entity_t ecs_bulk_new_w_entity(
    ecs_world_t *world,
    ecs_entity_t component,
    int32_t count);

FLECS_EXPORT
ecs_entity_t ecs_bulk_new_w_type(
    ecs_world_t *world,
    ecs_type_t type,
    int32_t count,
    void** data);

#define ecs_bulk_new(world, type, count)\
    ecs_bulk_new_w_type(world, T##type, count, NULL)


/* -- Add components -- */

FLECS_EXPORT
void ecs_add_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t component);

FLECS_EXPORT
void ecs_add_type(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_type_t type);

#define ecs_add(world, entity, type)\
    ecs_add_type(world, entity, T##type)


/* -- Remove components -- */

FLECS_EXPORT
void ecs_remove_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t component);

FLECS_EXPORT
void ecs_remove_type(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_type_t type);

#define ecs_remove(world, entity, type)\
    ecs_remove_type(world, entity, T##type)


/* -- Bulk add -- */

FLECS_EXPORT
void ecs_bulk_add_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t component,
    ecs_filter_t *filter);

FLECS_EXPORT
void ecs_bulk_add_type(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_type_t type,
    ecs_filter_t *filter);

#define ecs_bulk_add(world, entity, type, filter)\
    ecs_bulk_add_type(world, entity, T##type, filter)


/* -- Bulk remove -- */

FLECS_EXPORT
void ecs_bulk_remove_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t component,
    ecs_filter_t *filter);

FLECS_EXPORT
void ecs_bulk_remove_type(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_type_t type,
    ecs_filter_t *filter);

#define ecs_bulk_remove(world, entity, type, filter)\
    ecs_bulk_remove_type(world, entity, T##type, filter)


/* -- Add remove / Bulk add remove -- */

FLECS_EXPORT
void ecs_add_remove_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t to_add,
    ecs_entity_t to_remove);

FLECS_EXPORT
void ecs_add_remove_type(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_type_t to_add,
    ecs_type_t to_remove);

#define ecs_add_remove(world, entity, to_add, to_remove)\
    ecs_add_remove_type(world, entity, T##to_add, T##to_remove)

FLECS_EXPORT
void ecs_bulk_add_remove_type(
    ecs_world_t *world,
    ecs_type_t to_add,
    ecs_type_t to_remove,
    const ecs_filter_t *filter);

#define ecs_bulk_add_remove(world, to_add, to_remove, filter)\
    ecs_bulk_add_remove_type(world, T##to_add, T##to_remove, filter)


/* -- Delete & bulk delete -- */

FLECS_EXPORT
void ecs_delete(
    ecs_world_t *world,
    ecs_entity_t entity);

FLECS_EXPORT
void ecs_bulk_delete(
    ecs_world_t *world,
    const ecs_filter_t *filter);


/* -- Copy -- */

FLECS_EXPORT
ecs_entity_t ecs_copy(
    ecs_world_t *world,
    ecs_entity_t dst,
    ecs_entity_t src,
    bool copy_value);


/* -- Get -- */

FLECS_EXPORT
const void* ecs_get_ptr_w_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t component);

#define ecs_get_ptr(world, entity, component)\
    (const component*)ecs_get_ptr_w_entity(world, entity, E##component)

#define ecs_get(world, entity, component)\
  (*(const component*)ecs_get_ptr_w_entity(world, entity, E##component))


/* -- Get cached -- */

FLECS_EXPORT
const void* ecs_get_cached_ptr_w_entity(
    ecs_world_t *world,
    ecs_cached_ptr_t *cached_ptr,
    ecs_entity_t entity,
    ecs_entity_t component);

#define ecs_get_cached_ptr(world, cached_ptr, entity, component)\
    (const component*)ecs_get_cached_ptr_w_entity(world, cached_ptr, entity, E##component)


/* -- Get mutable -- */

FLECS_EXPORT
void* ecs_get_mut_w_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t component,
    bool *is_added);

#define ecs_get_mut(world, entity, component, is_added)\
    ecs_get_mut_w_entity(world, entity, ecs_entity(component), is_added)


/* -- Modified -- */

FLECS_EXPORT 
void ecs_modified_w_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t component);

#define ecs_modified(world, entity, component)\
    ecs_modified_w_entity(world, entity, ecs_entity(component))


/* -- Set -- */

FLECS_EXPORT
ecs_entity_t ecs_set_ptr_w_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t component,
    size_t size,
    const void *ptr);

#define ecs_set_ptr(world, entity, component, ptr)\
    ecs_set_ptr_w_entity(world, entity, ecs_entity(component), sizeof(component), ptr)

/* Conditionally skip macro's as compound literals are not supported in C89 */
#ifndef __BAKE_LEGACY__
#define ecs_set(world, entity, component, ...)\
    ecs_set_ptr_w_entity(world, entity, ecs_entity(component), sizeof(component), &(component)__VA_ARGS__)
#endif


/* -- Has -- */

FLECS_EXPORT
bool ecs_has_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t component);

FLECS_EXPORT
bool ecs_has_type(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_type_t type);

#define ecs_has(world, entity, type)\
    ecs_has_type(world, entity, T##type)

#define ecs_has_owned(world, entity, type, owned)\
    ecs_type_has_owned_type(world, ecs_get_type(world, entity), T##type, owned)

#define ecs_has_owned_entity(world, entity, has, owned)\
    ecs_type_has_owned_entity(world, ecs_get_type(world, entity), has, owned)


/* -- Entity info -- */

FLECS_EXPORT
ecs_type_t ecs_get_type(
    ecs_world_t *world,
    ecs_entity_t entity);


FLECS_EXPORT
const char* ecs_get_name(
    ecs_world_t *world,
    ecs_entity_t entity);

FLECS_EXPORT
bool ecs_get_watched(
    ecs_world_t *world,
    ecs_entity_t entity);


/* -- Count entities -- */

FLECS_EXPORT
int32_t ecs_count_entity(
    ecs_world_t *world,
    ecs_entity_t entity);

FLECS_EXPORT
int32_t ecs_count_type(
    ecs_world_t *world,
    ecs_type_t type);

#define ecs_count(world, type)\
    ecs_count_type(world, ecs_type(type))

FLECS_EXPORT
int32_t ecs_count_w_filter(
    ecs_world_t *world,
    const ecs_filter_t *filter);


/* -- Lookup entities by name -- */

FLECS_EXPORT
ecs_entity_t ecs_lookup(
    ecs_world_t *world,
    const char *id);

FLECS_EXPORT
ecs_entity_t ecs_lookup_child(
    ecs_world_t *world,
    ecs_entity_t parent,
    const char *name);


/* -- Get parent -- */

FLECS_EXPORT
ecs_entity_t ecs_get_parent_w_entity(
    ecs_world_t *world,
    ecs_entity_t entity,
    ecs_entity_t component);

#define ecs_get_parent(world, entity, component)\
    ecs_get_parent_w_entity(world, entity, ecs_entity(component))



////////////////////////////////////////////////////////////////////////////////
//// Rows API
////////////////////////////////////////////////////////////////////////////////

/** Obtain column data. 
 * This function is to be used inside a system to obtain data from a column in
 * the system signature. The provided index corresponds with the index of the
 * element in the system signature, starting from one. For example, for the
 * following system signature:
 * 
 * Position, Velocity
 * 
 * Position is at index 1, and Velocity is at index 2.
 * 
 * This function is typically invoked through the `ECS_COLUMN` macro which
 * automates declaring a variable of the correct type in the scope of the system
 * function.
 * 
 * When a valid pointer is obtained, it can be used as an array with rows->count
 * elements if the column is owned by the entity being iterated over, or as a
 * pointer if the column is shared (see ecs_is_shared).
 * 
 * @param rows The rows parameter passed into the system.
 * @param index The index identifying the column in a system signature.
 * @return A pointer to the column data if index is valid, otherwise NULL.
 */
FLECS_EXPORT
void* _ecs_column(
    const ecs_rows_t *rows,
    size_t size,
    int32_t column);

#define ecs_column(rows, type, column)\
    ((type*)_ecs_column(rows, sizeof(type), column))

/** Same as ecs_column, but for const ([in]) columns */
FLECS_EXPORT
const void* _ecs_const_column(
    const ecs_rows_t *rows,
    size_t size,
    int32_t column);

#define ecs_const_column(rows, type, column)\
    ((const type*)_ecs_const_column(rows, sizeof(type), column))

/** Test if column is shared or not. 
 * The following signature shows an example of owned components and shared
 * components:
 * 
 * Position, PARENT.Velocity, MyEntity.Mass
 * 
 * Position is an owned component, while Velocity and Mass are shared 
 * components. While these kinds of relationships are expressed explicity in a
 * system signature, inheritance relationships are implicit. The above signature
 * matches both entities for which Position is owned as well as entities for
 * which Position appears in an entity that they inherit from.
 * 
 * If a system needs to support both cases, it needs to test whether the
 * component is shared or not. This test only needs to happen once per system
 * callback invocation, as all the entities being iterated over will either own
 * or not own the component.
 * 
 * @param rows The rows parameter passed into the system.
 * @param index The index identifying the column in a system signature.
 * @return true if the column is shared, false if it is owned.
 */
FLECS_EXPORT
bool ecs_is_shared(
    const ecs_rows_t *rows,
    int32_t column);

/** Obtain a single field. 
 * This is an alternative method to ecs_column to access data in a system, which
 * accesses data from individual fields (one column per row). This method is
 * slower than iterating over a column array, but has the added benefit that it
 * automatically abstracts between shared components and owned components. 
 * 
 * This is particularly useful if a system is unaware whether a particular 
 * column is from a prefab, as a system does not explicitly state in an argument
 * expression whether prefabs should be matched with, thus it is possible that
 * a system receives both shared and non-shared data for the same column.
 * 
 * When a system uses fields, these differences will be transparent, and it is
 * therefore the method that provides the most flexibility with respect to the
 * kind of data the system can accept.
 */
FLECS_EXPORT
void *_ecs_field(
    const ecs_rows_t *rows,
    size_t size,
    int32_t column,
    int32_t row);

#define ecs_field(rows, type, column, row)\
    ((type*)_ecs_field(rows, sizeof(type), column, row))

/** Obtain the source of a column from inside a system.
 * This operation lets you obtain the entity from which the column data was
 * resolved. In most cases a component will come from the entities being
 * iterated over, but when using prefabs or containers, the component can be
 * shared between entities. For shared components, this function will return the
 * original entity on which the component is stored.
 * 
 * If a column is specified for which the component is stored on the entities
 * being iterated over, the operation will return 0, as the entity id in that
 * case depends on the row, not on the column. To obtain the entity ids for a
 * row, a system should access the entity column (column zero) like this:
 * 
 * ecs_entity_t *entities = ecs_column(rows, ecs_entity_t, 0);
 * 
 * @param rows Pointer to the rows object passed into the system callback.
 * @param index An index identifying the column for which to obtain the component.
 * @return The source entity for the column. 
 */
FLECS_EXPORT
ecs_entity_t ecs_column_source(
    const ecs_rows_t *rows,
    int32_t column);

/** Obtain the component for a column inside a system.
 * This operation obtains the component handle for a column in the system. This
 * function wraps around the 'components' array in the ecs_rows_t type.
 * 
 * Note that since component identifiers are obtained from the same pool as
 * regular entities, the return type of this function is ecs_entity_t.
 * 
 * When a system contains an argument that is prefixed with 'ID', the resolved
 * entity will be accessible through this function as well.
 * 
 * Column indices for system arguments start from 1, where 0 is reserved for a
 * column that contains entity identifiers. Passing 0 to this function for the
 * column index will return 0.
 * 
 * @param rows Pointer to the rows object passed into the system callback.
 * @param index An index identifying the column for which to obtain the component.
 * @return The component for the specified column, or 0 if failed.
 */
FLECS_EXPORT
ecs_entity_t ecs_column_entity(
    const ecs_rows_t *rows,
    int32_t column);

/** Obtain the type of a column from inside a system. 
 * This operation is equivalent to ecs_column_entity, except that it returns
 * a type, instead of an entity handle. Invoking this function is the same as
 * doing:
 * 
 * ecs_type_from_entity( ecs_column_entity(rows, index));
 * 
 * This function is wrapped in the following convenience macro which ensures
 * that the type variable is named so it can be used with functions like ecs_add
 * and ecs_set:
 * 
 * ECS_COLUMN_COMPONENT(rows, Position, 1);
 * 
 * After this macro you can invoke functions like ecs_set as you normally would:
 * 
 * ecs_set(world, e, Position, {10, 20});
 * 
 * @param rows Pointer to the rows object passed into the system callback.
 * @param index An index identifying the column for which to obtain the component.
 * @return The type for the specified column, or 0 if failed.
 */ 
FLECS_EXPORT
ecs_type_t ecs_column_type(
    const ecs_rows_t *rows,
    int32_t column);

/** Is the column readonly.
 * This operation returns if the column is a readonly column. Readonly columns
 * are marked in the system signature with the [in] modifier. 
 * 
 * @param rows Pointer to the rows object passed into the system callback.
 * @param column An index identifying the column.
 * @return true if the column is readonly, false otherwise. */
FLECS_EXPORT
bool ecs_is_readonly(
    const ecs_rows_t *rows,
    int32_t column);

/** Get type of table that system is currently iterating over. */
FLECS_EXPORT
ecs_type_t ecs_table_type(
    const ecs_rows_t *rows);

/** Get column using the table index. */
FLECS_EXPORT
void* ecs_table_column(
    const ecs_rows_t *rows,
    int32_t column);

/** Get a strongly typed pointer to a column (owned or shared). */
#define ECS_COLUMN(rows, type, id, column)\
    type *id = ecs_column(rows, type, column)

/** Get a strongly typed pointer to a column (owned or shared). */
#define ECS_CONST_COLUMN(rows, type, id, column)\
    const type *id = ecs_const_column(rows, type, column)

/** Obtain a handle to the component of a column */
#define ECS_COLUMN_COMPONENT(rows, id, column)\
    ECS_ENTITY_VAR(id) = ecs_column_entity(rows, column);\
    ECS_TYPE_VAR(id) = ecs_column_type(rows, column);\
    (void)ecs_entity(id);\
    (void)ecs_type(id)

/** Obtain a handle to the entity of a column */
#define ECS_COLUMN_ENTITY(rows, id, column)\
    ecs_entity_t id = ecs_column_entity(rows, column);\
    ECS_TYPE_VAR(id) = ecs_column_type(rows, column);\
    (void)id;\
    (void)ecs_type(id)

/** Utility macro for importing all handles for a module from a system column */
#define ECS_IMPORT_COLUMN(rows, module, column) \
    module *M##module##_ptr = ecs_column(rows, module, column);\
    ecs_assert(M##module##_ptr != NULL, ECS_MODULE_UNDEFINED, #module);\
    ecs_assert(ecs_is_shared(rows, column), ECS_COLUMN_IS_NOT_SHARED, NULL);\
    module M##module = *M##module##_ptr;\
    module##ImportHandles(M##module)


////////////////////////////////////////////////////////////////////////////////
//// Filter iterator API
////////////////////////////////////////////////////////////////////////////////

typedef struct ecs_filter_iter_t {
    ecs_filter_t filter;
    ecs_sparse_t *tables;
    int32_t index;
    ecs_rows_t rows;
} ecs_filter_iter_t;

/** Create iterator that matches world tables with specified filter.
 * This operation allows applications to query entities ad hoc with a filter. 
 * Combined with the ecs_filter_next function an application can iterate over a
 * set of tables that matches the provided filter, for which the ecs_filter_next
 * function will populate an ecs_rows_t object, which can be used to iterate the
 * entities in the table.
 * 
 * @param world The world.
 * @param filter The filter.
 * @return An iterator that can be used with ecs_filter_next.
 */
FLECS_EXPORT
ecs_filter_iter_t ecs_filter_iter(
    ecs_world_t *world,
    const ecs_filter_t *filter);

/** Same as ecs_filter_iter, but for iterating snapshots tables. */
FLECS_EXPORT
ecs_filter_iter_t ecs_snapshot_filter_iter(
    ecs_world_t *world,
    const ecs_snapshot_t *snapshot,
    const ecs_filter_t *filter);    

/** Iterate tables matched by filter.
 * This operation can be called repeatedly for an iterator until it returns
 * false, in which case there are no more tables that matched the filter.
 *
 * When the operation returns true, the contents of the table can be accessed
 * through the "rows" member of the iterator, which is of type ecs_rows_t. To
 * get the component data, an application has to first obtain the table type
 * with ecs_table_type(iter.rows). This type contains the ordered list of
 * components stored in the table.
 *
 * An application can then obtain a specific component by first retrieving the
 * index of the component in the table type with column = 
 * ecs_type_index_of(table_type, Component), followed by 
 * ecs_table_column(rows, column) to obtain a pointer to the component array.
 * 
 * @param iter The iterator.
 */
FLECS_EXPORT
bool ecs_filter_next(
    ecs_filter_iter_t *iter);


////////////////////////////////////////////////////////////////////////////////
//// System API
////////////////////////////////////////////////////////////////////////////////

/** Enable or disable a system.
 * This operation enables or disables a system. A disabled system will not be
 * ran during ecs_progress or when components must be initialized or
 * deinitialized. Systems are enabled by default.
 *
 * This operation expects a valid system handle, or in other words, an entity
 * with the EcsSystem component. If a handle to an entity is provided that does
 * not have this component, the operation will fail.
 *
 * @param world The world.
 * @param system The system to enable or disable.
 * @param enabled true to enable the system, false to disable the system.
 * @return 0 if succeeded, -1 if the operation failed.
 */
FLECS_EXPORT
void ecs_enable(
    ecs_world_t *world,
    ecs_entity_t system,
    bool enabled);

/** Returns the enabled status for a system / entity.
 * This operation will return whether a system is enabled or disabled. Currently
 * only systems can be enabled or disabled, but this operation does not fail
 * when a handle to an entity is provided that is not a system. If this
 * operation is called on a non-system entity, the operation will return true.
 *
 * @param world The world.
 * @param system The system to check.
 * @return True if the system is enabled, false if the system is disabled.
 */
FLECS_EXPORT
bool ecs_is_enabled(
    ecs_world_t *world,
    ecs_entity_t system);

/** Run a specific system manually.
 * This operation runs a single system manually. It is an efficient way to
 * invoke logic on a set of entities, as manual systems are only matched to
 * tables at creation time or after creation time, when a new table is created.
 *
 * Manual systems are useful to evaluate lists of prematched entities at
 * application defined times. Because none of the matching logic is evaluated
 * before the system is invoked, manual systems are much more efficient than
 * manually obtaining a list of entities and retrieving their components.
 *
 * An application may pass custom data to a system through the param parameter.
 * This data can be accessed by the system through the param member in the
 * ecs_rows_t value that is passed to the system callback.
 *
 * Any system may interrupt execution by setting the interrupted_by member in
 * the ecs_rows_t value. This is particularly useful for manual systems, where
 * the value of interrupted_by is returned by this operation. This, in
 * cominbation with the param argument lets applications use manual systems
 * to lookup entities: once the entity has been found its handle is passed to
 * interrupted_by, which is then subsequently returned.
 *
 * @param world The world.
 * @param system The system to run.
 * @param delta_time: The time passed since the last system invocation.
 * @param param A user-defined parameter to pass to the system.
 * @return handle to last evaluated entity if system was interrupted.
 */
FLECS_EXPORT
ecs_entity_t ecs_run(
    ecs_world_t *world,
    ecs_entity_t system,
    float delta_time,
    void *param);

/** Run system with offset/limit and type filter.
 * This operation is the same as ecs_run, but filters the entities that will be
 * iterated by the system.
 * 
 * Entities can be filtered in two ways. Offset and limit control the range of
 * entities that is iterated over. The range is applied to all entities matched
 * with the system, thus may cover multiple archetypes.
 * 
 * The type filter controls which entity types the system will evaluate. Only
 * types that contain all components in the type filter will be iterated over. A
 * type filter is only evaluated once per table, which makes filtering cheap if
 * the number of entities is large and the number of tables is small, but not as
 * cheap as filtering in the system signature.
 * 
 * @param world The world.
 * @param system The system to invoke.
 * @param delta_time: The time passed since the last system invocation.
 * @param filter A component or type to filter matched entities.
 * @param param A user-defined parameter to pass to the system.
 * @return handle to last evaluated entity if system was interrupted.
 */
FLECS_EXPORT
ecs_entity_t ecs_run_w_filter(
    ecs_world_t *world,
    ecs_entity_t system,
    float delta_time,
    int32_t offset,
    int32_t limit,
    const ecs_filter_t *filter,
    void *param);


/** Set system context.
 * This operation allows an application to register custom data with a system.
 * This data can be accessed using the ecs_get_system_context operation, or
 * through the 'param' field in the ecs_rows_t parameter passed into the system
 * callback.
 *
 * @param world The world.
 * @param system The system on which to set the context.
 * @param ctx A pointer to a user defined structure.
 */
FLECS_EXPORT
void ecs_set_system_context(
    ecs_world_t *world,
    ecs_entity_t system,
    const void *ctx);

/** Get system context.
 * Get custom data from a system previously set with ecs_set_system_context.
 *
 * @param world The world.
 * @param system The system of which to obtain the context.
 * @return The system context.
 */
FLECS_EXPORT
void* ecs_get_system_context(
    ecs_world_t *world,
    ecs_entity_t system);

/** System status change callback */
typedef enum ecs_system_status_t {
    EcsSystemStatusNone = 0,
    EcsSystemEnabled,
    EcsSystemDisabled,
    EcsSystemActivated,
    EcsSystemDeactivated
} ecs_system_status_t;

typedef void (*ecs_system_status_action_t)(
    ecs_world_t *world,
    ecs_entity_t system,
    ecs_system_status_t status,
    void *ctx);

/** Set system status action.
 * The status action is invoked whenever a system is enabled or disabled. Note
 * that a system may be enabled but may not actually match any entities. In this
 * case the system is enabled but not _active_.
 *
 * In addition to communicating the enabled / disabled status, the action also
 * communicates changes in the activation status of the system. A system becomes
 * active when it has one or more matching entities, and becomes inactive when
 * it no longer matches any entities.
 * 
 * A system switches between enabled and disabled when an application invokes the
 * ecs_enable operation with a state different from the state of the system, for
 * example the system is disabled, and ecs_enable is invoked with enabled: true.
 *
 * Additionally a system may switch between enabled and disabled when it is an
 * EcsOnDemand system, and interest is generated or lost for one of its [out]
 * columns.
 *
 * @param world The world.
 * @param system The system for which to set the action.
 * @param action The action.
 * @param ctx Context that will be passed to the action when invoked.
 */
FLECS_EXPORT
void ecs_set_system_status_action(
    ecs_world_t *world,
    ecs_entity_t system,
    ecs_system_status_action_t action,
    const void *ctx);


////////////////////////////////////////////////////////////////////////////////
//// Timer API
////////////////////////////////////////////////////////////////////////////////

/** Set timer timeout.
 * This operation executes any systems associated with the timer after the
 * specified timeout value. If the entity contains an existing timer, the 
 * timeout value will be reset.
 *
 * Any entity can be used as a timer (including systems). If a timeout value is
 * set on a system entity, it will be automatically applied to that system.
 *
 * The timer is synchronous, and is incremented each frame by delta_time.
 *
 * @param world The world.
 * @param timer The timer for which to set the timeout (0 to create one).
 * @param timeout The timeout value.
 * @return The timer entity.
 */
FLECS_EXPORT
ecs_entity_t ecs_set_timeout(
    ecs_world_t *world,
    ecs_entity_t timer,
    float timeout);

/** Get current timeout value for the specified timer.
 * This operation returns the value set by ecs_set_timeout. If no timer is
 * active for this entity, the operation returns 0.
 *
 * After the timeout expires the timer component is removed from the entity.
 * This means that if ecs_get_timeout is invoked after the timer is expired, the
 * operation will return 0.
 *
 * @param world The world.
 * @param timer The timer.
 * @return The current timeout value, or 0 if no timer is active.
 */
FLECS_EXPORT
float ecs_get_timeout(
    ecs_world_t *world,
    ecs_entity_t timer);

/** Set timer interval.
 * This operation will continously invoke systems associated with the timer 
 * after the interval period expires. If the entity contains an existing timer,
 * the interval value will be reset.
 *
 * Any entity can be used as a timer (including systems). If an interval value
 * is set on a system entity, it will be automatically applied to that system.
 *
 * The timer is synchronous, and is incremented each frame by delta_time.
 *
 * @param world The world.
 * @param timer The timer for which to set the interval (0 to create one).
 * @param interval The interval value.
 * @return The timer entity.
 */
FLECS_EXPORT
ecs_entity_t ecs_set_interval(
    ecs_world_t *world,
    ecs_entity_t timer,
    float interval);   

/** Get current interval value for the specified timer.
 * This operation returns the value set by ecs_set_interval. If no timer is
 * active for this entity, the operation returns 0.
 *
 * @param world The world.
 * @param timer The timer for which to set the interval. If 0, an entity will be created.
 * @return The current interval value, or 0 if no timer is active.
 */
FLECS_EXPORT
float ecs_get_interval(
    ecs_world_t *world,
    ecs_entity_t timer);

/** Start timer.
 * This operation resets the timer and starts it with the specified timeout. The
 * entity must have the EcsTimer component (added by ecs_set_timeout and 
 * ecs_set_interval). If the entity does not have the EcsTimer component this
 * operation will assert.
 *
 * @param world The world.
 * @param timer The timer to start.
 */
FLECS_EXPORT
void ecs_start_timer(
    ecs_world_t *world,
    ecs_entity_t timer);

/** Stop timer
 * This operation stops a timer from triggering. The entity must have the 
 * EcsTimer component or this operation will assert.
 *
 * @param world The world.
 * @param timer The timer to stop.
 */
FLECS_EXPORT
void ecs_stop_timer(
    ecs_world_t *world,
    ecs_entity_t timer);

/** Set rate filter.
 * This operation sets the source and rate for a rate filter. A rate filter
 * samples another tick source (or frames, if none provided) and ticks when the
 * number of sampled ticks equals the rate.
 *
 * @param world The world.
 * @param filter The filter entity (0 to create one).
 * @param rate The rate to apply.
 * @param source The tick source (0 to use frames)
 * @return The filter entity.
 */
FLECS_EXPORT
ecs_entity_t ecs_set_rate_filter(
    ecs_world_t *world,
    ecs_entity_t filter,
    int32_t rate,
    ecs_entity_t source);

/** Assign tick source to system.
 * This operation associates a system with a tick source. If the system is both 
 * active and enabled at the moment the tick source fires, it will be executed.
 * If no tick source is associated with a system, it will be invoked every 
 * frame.
 *
 * To disassociate a tick source from a system, use 0 for the tick_source 
 * parameter.
 *
 * Timer and rate filter entities are valid tick sources. An application can
 * also create its own tick source by setting the EcsTickSource component on an
 * entity.
 *
 * If an entity without the EcsTickSource component is provided as tick source,
 * the system will not be executed.
 *
 * @param world The world.
 * @param system The system to associate with the timer.
 * @param timer The timer to associate with the system.
 */ 
FLECS_EXPORT
void ecs_set_tick_source(
    ecs_world_t *world,
    ecs_entity_t system,
    ecs_entity_t tick_source);


////////////////////////////////////////////////////////////////////////////////
//// Query API
////////////////////////////////////////////////////////////////////////////////

typedef struct ecs_query_iter_t {
    ecs_query_t *query;
    int32_t offset;
    int32_t limit;
    int32_t remaining;
    int32_t index;

    /* This member can be read by the application to obtain component columns.
     * Columns can be obtained the same way as with normal systems, with the
     * ECS_COLUMN macro and by providing the correct index of the column in the
     * query signature expression. */
    ecs_rows_t rows;
} ecs_query_iter_t;

/** Create a query.
 * This operation creates a query. Queries are used to iterate over entities
 * that match a signature expression.
 * 
 * Queries are 'persistent' meaning they are registered with
 * the world and continuously matched with new entities (tables). Queries
 * are the fastest way to iterate over entities, as a lot of processing is
 * done when entities are matched, outside of the main loop.
 *
 * Queries are the mechanism used by systems, and as such both accept the
 * same signature expressions, and have similar performance. 
 *
 * Queries, like systems, iterate over component data from the main stage.
 * This means that when an application is iterating a query outside of a system,
 * care must be taken when adding/removing components or creating/deleting
 * entities, as this may corrupt the iteration.
 *
 * When a query is iterated over inside a system normal staging applies, and an
 * application can safely update entities.
 *
 * @param world The world.
 * @param expr The query signature expression.
 * @return The new query.
 */
FLECS_EXPORT
ecs_query_t* ecs_query_new(
    ecs_world_t *world,
    const char *sig);

/** Sort the output of a query */
FLECS_EXPORT
void ecs_query_sort(
    ecs_world_t *world,
    ecs_query_t *query,
    ecs_entity_t sort_component,
    ecs_compare_action_t compare);

FLECS_EXPORT
void ecs_query_sort_types(
    ecs_world_t *world,
    ecs_query_t *query,
    ecs_entity_t monitor_component,
    ecs_rank_type_action_t rank_type);

/** Cleanup a query.
 * This operation frees a query.
 *
 * @param query The query.
 */
FLECS_EXPORT
void ecs_query_free(
    ecs_query_t *query);

/** Iterate over a query.
 * This operation returns an iterator to a query. Multiple iterators can be
 * created per query. It is safe to iterate over a query from multiple threads,
 * as long as each thread uses its own iterator.
 *
 * The iterator contains an ecs_rows_t struct which can be read by the 
 * application to obtain the component data, just like with systems.
 *
 * @param query The query to iterate.
 * @param offset The number of entities to skip.
 * @param limit The maximum number of entities to iterate.
 * @return The query iterator.
 */
FLECS_EXPORT
ecs_query_iter_t ecs_query_iter(
    ecs_query_t *query,
    int32_t offset,
    int32_t limit);  

/** Progress the query iterator.
 * This operation progresses the iterator. The iterator will return once for
 * each matched table (entity type). 
 *
 * @param iter The iterator.
 * @return true if more data is available, false if no more data is available.
 */
FLECS_EXPORT
bool ecs_query_next(
    ecs_query_iter_t *iter);      


////////////////////////////////////////////////////////////////////////////////
//// Snapshot API
////////////////////////////////////////////////////////////////////////////////

/** Create a snapshot.
 * This operation makes a copy of all component in the world that matches the 
 * specified filter.
 *
 * @param world The world to snapshot.
 * @param filter A filter that specifies which components to snapshot.
 * @param return The snapshot.
 */
FLECS_EXPORT
ecs_snapshot_t* ecs_snapshot_take(
    ecs_world_t *world,
    const ecs_filter_t *filter);

/** Restore a snapshot.
 * This operation restores the world to the state it was in when the specified
 * snapshot was taken. A snapshot can only be used once for restoring, as its
 * data replaces the data that is currently in the world.
 * This operation also resets the last issued entity handle, so any calls to
 * ecs_new may return entity ids that have been issued before restoring the 
 * snapshot.
 *
 * The world in which the snapshot is restored must be the same as the world in
 * which the snapshot is taken.
 *
 * @param world The world to restore the snapshot to.
 * @param snapshot The snapshot to restore. 
 */
FLECS_EXPORT
void ecs_snapshot_restore(
    ecs_world_t *world,
    ecs_snapshot_t *snapshot);

/** Copy a snapshot.
 * This operation creates a copy of the provided snapshot. An application can
 * optionally filter the tables to copy.
 *
 * @param world The world.
 * @param snapshot The snapshot to copy.
 * @param filter Filter to apply to the copy (optional)
 * @return The duplicated snapshot.
 */
FLECS_EXPORT
ecs_snapshot_t* ecs_snapshot_copy(
    ecs_world_t *world,
    const ecs_snapshot_t *snapshot,
    const ecs_filter_t *filter);

/** Free snapshot resources.
 * This frees resources associated with a snapshot without restoring it.
 *
 * @param world The world.
 * @param snapshot The snapshot to free. 
 */
FLECS_EXPORT
void ecs_snapshot_free(
    ecs_world_t *world,
    ecs_snapshot_t *snapshot);


////////////////////////////////////////////////////////////////////////////////
//// Reader/writer API
////////////////////////////////////////////////////////////////////////////////

/** Initialize a reader.
 * A reader serializes data in a world to a sequence of bytes that can be stored
 * in a file or sent across a network. 
 *
 * @param world The world to serialize.
 * @return The reader.
 */
FLECS_EXPORT
ecs_reader_t ecs_reader_init(
    ecs_world_t *world);

/** Initialize a snapshot reader.
 * A snapshot reader serializes data in a snapshot to a sequence of bytes that 
 * can be stored in a file or sent across a network. A snapshot reader has as
 * advantage that serialization can take place asynchronously while the world
 * is progressing.
 *
 * @param world The world in which the snapshot is taken.
 * @param snapshot The snapshot to serialize.
 * @return The reader.
 */
FLECS_EXPORT
ecs_reader_t ecs_snapshot_reader_init(
    ecs_world_t *world,
    const ecs_snapshot_t *snapshot);

/** Read from a reader.
 * This operation reads a specified number of bytes from a reader and stores it
 * in the specified buffer. When there are no more bytes to read from the reader
 * the operation will return 0, otherwise it will return the number of bytes
 * read.
 *
 * The specified buffer must be at least as big as the specified size, and the
 * specified size must be a multiple of 4.
 *
 * @param buffer The buffer in which to store the read bytes.
 * @param size The maximum number of bytes to read.
 * @param reader The reader from which to read the bytes.
 * @return The number of bytes read.
 */ 
FLECS_EXPORT
size_t ecs_reader_read(
    char *buffer,
    size_t size,
    ecs_reader_t *reader);

/** Initialize a writer.
 * A writer deserializes data from a sequence of bytes into a world. This 
 * enables applications to restore data from disk or the network.
 *
 * The provided world must be either empty or compatible with the data to
 * deserialize, where compatible means that the serialized component ids and 
 * sizes must match exactly with those in the world. Errors can occur if a world
 * is provided in which components have been declared in a different order, or
 * when components have different type definitions.
 *
 * @param world The world in which to deserialize the data.
 * @return The writer. 
 */
FLECS_EXPORT
ecs_writer_t ecs_writer_init(
    ecs_world_t *world);

/** Write to a writer.
 * This operation writes a specified number of bytes from a specified buffer
 * into the writer. The writer will restore the deserialized data into the 
 * original serialized entities. The write operation may be invoked multiple
 * times with partial buffers, which allows applications to use static buffers
 * when reading from, for example, a file or the network.
 *
 * The data contained in the buffers must have been serialized with the
 * ecs_reader_read operation. If the data does not match the expected format, or
 * the data contains conflicts with the world, the operation will fail. The
 * data must be provided in the same order as produced by ecs_reader_read,
 * but the used buffer size does not have to be the same as the one used by
 * ecs_reader_read. The buffer size must be a multiple of 4.
 * 
 * @param buffer The buffer to deserialize.
 * @param size The maximum number of bytes.
 * @param writer The writer to write to.
 * @return Zero if success, non-zero if failed to deserialize.
 */
FLECS_EXPORT
int ecs_writer_write(
    const char *buffer,
    size_t size,
    ecs_writer_t *writer);


////////////////////////////////////////////////////////////////////////////////
//// Module API
////////////////////////////////////////////////////////////////////////////////

/** Import a flecs module.
 * Flecs modules enable reusing components and systems across projects. To
 * use a module, a project needs to link with its library and include its header
 * file.
 *
 * The module returns a struct with handles to the loaded components / systems
 * so they can be accessed by the application. Note that if the module is loaded
 * in different worlds, the handles may not be the same.
 *
 * These naming conventions are not enforced, and projects are free to use their
 * own conventions, though these are the conventions used by the modules
 * provided by flecs.
 *
 * The load function has an additional flags argument which is passed to the
 * module, and is intended to allow applications to select only features they
 * require from a module. The mapping granularity of flags to components/systems
 * is to be defined by the module.
 *
 * This function is wrapped by the ECS_IMPORT convenience macro:
 *
 * ECS_IMPORT(world, EcsComponentsTransform 0);
 *
 * This macro automatically creates a variable called eEcsComponentsTransform
 * that is the struct with the handles for that component.
 *
 * @param world The world.
 * @param module The module to load.
 * @param flags A bitmask that specifies which parts of the module to load.
 * @param handles_out A struct with handles to the module components/systems.
 */
FLECS_EXPORT
ecs_entity_t ecs_import(
    ecs_world_t *world,
    ecs_module_action_t module,
    const char *module_name,
    int flags,
    void *handles_out,
    size_t handles_size);

/* Import a module from a library.
 * If a module is stored in another library, it can be dynamically loaded with
 * this operation. A library may contain multiple modules, and to disambiguate
 * the function allows applications to specify the 'module_name' aprameter.
 *
 * A library name typically looks like 'flecs.components.transform', whereas a
 * module name typically looks like 'FlecsComponentsTransform'.
 *
 * To use this function, Flecs needs to be built with bake, as it relies on
 * bake's package discovery utility API.
 *
 * @param world The world.
 * @param library_name The name of the library to load.
 * @param module_name The name of the module to load.
 * @param flags The flags to pass to the module.
 */
FLECS_EXPORT
ecs_entity_t ecs_import_from_library(
    ecs_world_t *world,
    const char *library_name,
    const char *module_name,
    int flags);

/** Define module
 */
#define ECS_MODULE(world, id)\
    ECS_ENTITY_VAR(id) = ecs_new_module(world, #id, sizeof(id));\
    ECS_TYPE_VAR(id) = ecs_type_from_entity(world, ecs_entity(id));\
    (void)ecs_entity(id);\
    (void)ecs_type(id);\
    id *handles = (id*)ecs_get_mut(world, ecs_entity(id), id, NULL);\

/** Wrapper around ecs_import.
 * This macro provides a convenient way to load a module with the world. It can
 * be used like this:
 *
 * ECS_IMPORT(world, FlecsSystemsPhysics, 0);
 * 
 * This macro will define entity and type handles for the component associated
 * with the module. An application can retrieve the module component like this:
 * 
 * FlecsSystemsPhysics m = ecs_get(world, EcsSingleton, FlecsSystemsPhysics);
 * 
 * The contents of a module component are module specific, although they
 * typically contain handles to the content of the module.
 */
#define ECS_IMPORT(world, id, flags) \
    id M##id;\
    ECS_ENTITY_VAR(id) = ecs_import(\
        world, id##Import, #id, flags, &M##id, sizeof(id));\
    ECS_TYPE_VAR(id) = ecs_type_from_entity(world, ecs_entity(id));\
    id##ImportHandles(M##id);\
    (void)ecs_entity(id);\
    (void)ecs_type(id);\

/** Utility macro for declaring a component inside a handles type */
#define ECS_DECLARE_COMPONENT(type)\
    ECS_ENTITY_VAR(type);\
    ECS_TYPE_VAR(type)

/** Utility macro for declaring a system inside a handles type */
#define ECS_DECLARE_ENTITY(entity)\
    ecs_entity_t entity;\
    ECS_TYPE_VAR(entity)

#define ECS_EXPORT_COMPONENT(type)\
    ECS_SET_COMPONENT(type)

#define ECS_EXPORT_ENTITY(type)\
    ecs_ei_set(type)

/** Utility macro for declaring handles by modules */
#define ECS_IMPORT_COMPONENT(handles, type)\
    ECS_ENTITY_VAR(type) = (handles).ecs_entity(type); (void)ecs_entity(type);\
    ECS_TYPE_VAR(type) = (handles).ecs_type(type); (void)ecs_type(type);\
    (void)ecs_entity(type);\
    (void)ecs_type(type)

/** Utility macro for declaring handles by modules */
#define ECS_IMPORT_ENTITY(handles, entity)\
    ecs_entity_t entity = (handles).entity;\
    ECS_TYPE_VAR(entity) = (handles).ecs_type(entity); (void)ecs_type(entity);\
    (void)entity;\
    (void)ecs_type(entity)

/** -- Builtin module flags -- */
#define ECS_REFLECTION (1)
#define ECS_2D (2)
#define ECS_3D (3)


////////////////////////////////////////////////////////////////////////////////
//// Type API
////////////////////////////////////////////////////////////////////////////////

FLECS_EXPORT
ecs_type_t ecs_type_from_entity(
    ecs_world_t *world,
    ecs_entity_t entity);

FLECS_EXPORT
ecs_entity_t ecs_type_to_entity(
    ecs_world_t *world,
    ecs_type_t type);

FLECS_EXPORT
char* ecs_type_str(
    ecs_world_t *world,
    ecs_type_t type);

FLECS_EXPORT
ecs_type_t ecs_type_find(
    ecs_world_t *world,
    ecs_entity_t *array,
    int32_t count);

FLECS_EXPORT
ecs_type_t ecs_type_merge(
    ecs_world_t *world,
    ecs_type_t type,
    ecs_type_t type_add,
    ecs_type_t type_remove);

FLECS_EXPORT
ecs_type_t ecs_type_add(
    ecs_world_t *world,
    ecs_type_t type,
    ecs_entity_t entity);

FLECS_EXPORT
ecs_type_t ecs_type_remove(
    ecs_world_t *world,
    ecs_type_t type,
    ecs_entity_t entity);

FLECS_EXPORT
bool ecs_type_has_entity(
    ecs_world_t *world,
    ecs_type_t type,
    ecs_entity_t entity);

FLECS_EXPORT
bool ecs_type_has_type(
    ecs_world_t *world,
    ecs_type_t type,
    ecs_type_t has);

FLECS_EXPORT
bool ecs_type_has_owned_entity(
    ecs_world_t *world,
    ecs_type_t type,
    ecs_entity_t entity,
    bool owned);

FLECS_EXPORT
bool ecs_type_has_owned_type(
    ecs_world_t *world,
    ecs_type_t type,
    ecs_type_t has,
    bool owned);

FLECS_EXPORT
ecs_entity_t ecs_type_get_entity_for_xor(
    ecs_world_t *world,
    ecs_type_t type,
    ecs_entity_t xor);

////////////////////////////////////////////////////////////////////////////////
//// Threading / Staging API
////////////////////////////////////////////////////////////////////////////////

FLECS_EXPORT
void ecs_set_threads(
    ecs_world_t *world,
    int32_t threads);

FLECS_EXPORT
int32_t ecs_get_threads(
    ecs_world_t *world);

FLECS_EXPORT
uint16_t ecs_get_thread_index(
    ecs_world_t *world);

FLECS_EXPORT
void ecs_merge(
    ecs_world_t *world);

FLECS_EXPORT
void ecs_set_automerge(
    ecs_world_t *world,
    bool auto_merge);

FLECS_EXPORT
bool ecs_staging_begin(
    ecs_world_t *world);

FLECS_EXPORT
bool ecs_staging_end(
    ecs_world_t *world,
    bool is_staged);


////////////////////////////////////////////////////////////////////////////////
//// Utilities
////////////////////////////////////////////////////////////////////////////////

/** Enables admin web server
 * This operation allows an profile and enable/disable registered systems. If
 * the flecs.systems.civetweb or flecs.systems.admin modules cannot be found,
 * the operation will fail.
 *
 * @param world The world.
 * @param port A port number for server.
 * 
 * @return The error code
 *          0 - success
 *          1 - failed to dynamically load `flecs.systems.civetweb` module
 *          2 - failed to dynamically load `flecs.systems.admin` module
 */
FLECS_EXPORT
int ecs_enable_admin(
	ecs_world_t* world,
	uint16_t port);

/** Enable command line console for inspecting Flecs internals.
 * If the flecs.systems.console module cannot be found, the operation will fail.
 *
 * @param world The world.
 * @return 0 if success, nonzero if failed.  
 */
FLECS_EXPORT
int ecs_enable_console(
	ecs_world_t* world);

/** Translate C type to entity variable */
#define ecs_entity(type) E##type

/** Translate C type to type variable */
#define ecs_type(type) T##type

/** Translate module name into handles struct */
#define ecs_module(type) M##type

/* Include stats at the end so it gets all the declarations */
#include "flecs/util/stats.h"

#ifdef __cplusplus
}

#ifndef FLECS_NO_CPP
#ifndef __BAKE_LEGACY__
#include "flecs/flecs.hpp"
#endif
#endif

#endif

#endif
