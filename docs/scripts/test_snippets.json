[
  {
    "test_name": "Concepts_Entity_01",
    "language": "cpp",
    "file_path": "docs/Quickstart.md",
    "line_number": 226,
    "section_title": "Entity",
    "h2_title": "Concepts",
    "h3_title": "Entity",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nauto e = world.entity();\ne.is_alive(); // true!\n\ne.destruct();\ne.is_alive(); // false!",
    "clean_code": "flecs::world world;\nauto e = world.entity();\ne.is_alive(); // true!\n\ne.destruct();\ne.is_alive(); // false!"
  },
  {
    "test_name": "CanToggle_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 36,
    "section_title": "CanToggle trait",
    "h2_title": "CanToggle trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nworld.component<Position>().add(flecs::CanToggle);\n\nflecs::entity e = world.entity().set(Position{10, 20});\n\ne.disable<Position>(); // Disable component\nassert(!e.enabled<Position>());\n\ne.enable<Position>(); // Enable component\nassert(e.enabled<Position>());",
    "clean_code": "flecs::world world;\nworld.component<Position>().add(flecs::CanToggle);\n\nflecs::entity e = world.entity().set(Position{10, 20});\n\ne.disable<Position>(); // Disable component\nassert(!e.enabled<Position>());\n\ne.enable<Position>(); // Enable component\nassert(e.enabled<Position>());"
  },
  {
    "test_name": "Cleanup_traits_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 107,
    "section_title": "Cleanup traits",
    "h2_title": "Cleanup traits",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nHIDE: flecs::entity parent = world.entity();\nHIDE: flecs::entity e = world.entity();\nstruct MyComponent {\n  flecs::entity e; // Not covered by cleanup traits\n};\n\ne.add(flecs::ChildOf, parent); // Covered by cleanup traits",
    "clean_code": "flecs::world world;\nflecs::entity parent = world.entity();\nflecs::entity e = world.entity();\nstruct MyComponent {\n  flecs::entity e; // Not covered by cleanup traits\n};\n\ne.add(flecs::ChildOf, parent); // Covered by cleanup traits"
  },
  {
    "test_name": "Cleanup_traits_02",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 159,
    "section_title": "Cleanup traits",
    "h2_title": "Cleanup traits",
    "h3_title": "",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nHIDE: flecs::entity Archer = world.entity();\nworld.remove_all(Archer);",
    "clean_code": "flecs::world world;\nflecs::entity Archer = world.entity();\nworld.remove_all(Archer);"
  },
  {
    "test_name": "Cleanup_traits_03",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 198,
    "section_title": "Cleanup traits",
    "h2_title": "Cleanup traits",
    "h3_title": "",
    "h4_title": "",
    "test_number": 3,
    "code": "HIDE: flecs::world world;\nHIDE: flecs::entity Archer = world.entity();\nworld.remove_all(Archer);\nworld.remove_all(Archer, flecs::Wildcard);\nworld.remove_all(flecs::Wildcard, Archer);",
    "clean_code": "flecs::world world;\nflecs::entity Archer = world.entity();\nworld.remove_all(Archer);\nworld.remove_all(Archer, flecs::Wildcard);\nworld.remove_all(flecs::Wildcard, Archer);"
  },
  {
    "test_name": "Cleanup_traits_Examples_OnDelete_Remove_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 272,
    "section_title": "(OnDelete, Remove)",
    "h2_title": "Cleanup traits",
    "h3_title": "Examples",
    "h4_title": "(OnDelete, Remove)",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nHIDE: struct Archer {};\n// Remove Archer from entities when Archer is deleted\nworld.component<Archer>()\n  .add(flecs::OnDelete, flecs::Remove);\n\nauto e = world.entity().add<Archer>();\n\n// This will remove Archer from e\nworld.component<Archer>().destruct();",
    "clean_code": "flecs::world world;\nstruct Archer {};\n// Remove Archer from entities when Archer is deleted\nworld.component<Archer>()\n  .add(flecs::OnDelete, flecs::Remove);\n\nauto e = world.entity().add<Archer>();\n\n// This will remove Archer from e\nworld.component<Archer>().destruct();"
  },
  {
    "test_name": "Cleanup_traits_Examples_OnDelete_Delete_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 333,
    "section_title": "(OnDelete, Delete)",
    "h2_title": "Cleanup traits",
    "h3_title": "Examples",
    "h4_title": "(OnDelete, Delete)",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nHIDE: struct Archer {};\n// Delete entities with Archer when Archer is deleted\nworld.component<Archer>()\n  .add(flecs::OnDelete, flecs::Delete);\n\nauto e = world.entity().add<Archer>();\n\n// This will delete e\nworld.component<Archer>().destruct();",
    "clean_code": "flecs::world world;\nstruct Archer {};\n// Delete entities with Archer when Archer is deleted\nworld.component<Archer>()\n  .add(flecs::OnDelete, flecs::Delete);\n\nauto e = world.entity().add<Archer>();\n\n// This will delete e\nworld.component<Archer>().destruct();"
  },
  {
    "test_name": "Cleanup_traits_Examples_OnDeleteTarget_Delete_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 400,
    "section_title": "(OnDeleteTarget, Delete)",
    "h2_title": "Cleanup traits",
    "h3_title": "Examples",
    "h4_title": "(OnDeleteTarget, Delete)",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nHIDE: struct ChildOf {};\n// Delete children when deleting parent\nworld.component<ChildOf>()\n  .add(flecs::OnDeleteTarget, flecs::Delete);\n\nauto p = world.entity();\nauto e = world.entity().add<ChildOf>(p);\n\n// This will delete both p and e\np.destruct();",
    "clean_code": "flecs::world world;\nstruct ChildOf {};\n// Delete children when deleting parent\nworld.component<ChildOf>()\n  .add(flecs::OnDeleteTarget, flecs::Delete);\n\nauto p = world.entity();\nauto e = world.entity().add<ChildOf>(p);\n\n// This will delete both p and e\np.destruct();"
  },
  {
    "test_name": "Cleanup_traits_Cleanup_order_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 474,
    "section_title": "Cleanup order",
    "h2_title": "Cleanup traits",
    "h3_title": "Cleanup order",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nHIDE: struct Node {};\n\nworld.observer<Node>()\n  .event(flecs::OnRemove)\n  .each([](flecs::entity e, Node n) { });\n\nflecs::entity p = world.entity().add<Node>();\nflecs::entity c = world.entity().add<Node>().child_of(p);",
    "clean_code": "flecs::world world;\nstruct Node {};\n\nworld.observer<Node>()\n  .event(flecs::OnRemove)\n  .each([](flecs::entity e, Node n) { });\n\nflecs::entity p = world.entity().add<Node>();\nflecs::entity c = world.entity().add<Node>().child_of(p);"
  },
  {
    "test_name": "DontFragment_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 565,
    "section_title": "DontFragment trait",
    "h2_title": "DontFragment trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nworld.component<Position>().add(flecs::DontFragment);",
    "clean_code": "flecs::world world;\nworld.component<Position>().add(flecs::DontFragment);"
  },
  {
    "test_name": "Exclusive_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 622,
    "section_title": "Exclusive trait",
    "h2_title": "Exclusive trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nHIDE: flecs::entity parent_a = world.entity();\nHIDE: flecs::entity parent_b = world.entity();\nflecs::entity e = world.entity();\ne.child_of(parent_a);\ne.child_of(parent_b); // replaces (ChildOf, parent_a)",
    "clean_code": "flecs::world world;\nflecs::entity parent_a = world.entity();\nflecs::entity parent_b = world.entity();\nflecs::entity e = world.entity();\ne.child_of(parent_a);\ne.child_of(parent_b); // replaces (ChildOf, parent_a)"
  },
  {
    "test_name": "Exclusive_trait_02",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 667,
    "section_title": "Exclusive trait",
    "h2_title": "Exclusive trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nflecs::entity MarriedTo = world.entity()\n  .add(flecs::Exclusive);",
    "clean_code": "flecs::world world;\nflecs::entity MarriedTo = world.entity()\n  .add(flecs::Exclusive);"
  },
  {
    "test_name": "Final_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 710,
    "section_title": "Final trait",
    "h2_title": "Final trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world ecs;\nauto e = ecs.entity()\n  .add(flecs::Final);\n\nHIDE: if (false) {\nauto i = ecs.entity()\n  .is_a(e); // not allowed\nHIDE: }",
    "clean_code": "flecs::world ecs;\nauto e = ecs.entity()\n  .add(flecs::Final);\n\nif (false) {\nauto i = ecs.entity()\n  .is_a(e); // not allowed\n}"
  },
  {
    "test_name": "Inheritable_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 772,
    "section_title": "Inheritable trait",
    "h2_title": "Inheritable trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nHIDE: struct Unit {};\nHIDE: struct Warrior {};\nworld.component<Unit>().add(flecs::Inheritable);\n\nauto q = world.query_builder()\n  .with<Unit>()\n  .build();\n\nworld.component<Warrior>().is_a<Unit>();\n\nq.each([](flecs::entity unit) {\n    // ...\n});",
    "clean_code": "flecs::world world;\nstruct Unit {};\nstruct Warrior {};\nworld.component<Unit>().add(flecs::Inheritable);\n\nauto q = world.query_builder()\n  .with<Unit>()\n  .build();\n\nworld.component<Warrior>().is_a<Unit>();\n\nq.each([](flecs::entity unit) {\n    // ...\n});"
  },
  {
    "test_name": "OneOf_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 862,
    "section_title": "OneOf trait",
    "h2_title": "OneOf trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\n// Enforce that target of relationship is child of Food\nauto Food = world.entity().add(flecs::OneOf);\nauto Apples = world.entity().child_of(Food);\nauto Fork = world.entity();\n\n// This is ok, Apples is a child of Food\nauto a = world.entity().add(Food, Apples);\n\nHIDE: if (false) {\n// This is not ok, Fork is not a child of Food\nauto b = world.entity().add(Food, Fork);\nHIDE: }",
    "clean_code": "flecs::world world;\n// Enforce that target of relationship is child of Food\nauto Food = world.entity().add(flecs::OneOf);\nauto Apples = world.entity().child_of(Food);\nauto Fork = world.entity();\n\n// This is ok, Apples is a child of Food\nauto a = world.entity().add(Food, Apples);\n\nif (false) {\n// This is not ok, Fork is not a child of Food\nauto b = world.entity().add(Food, Fork);\n}"
  },
  {
    "test_name": "OneOf_trait_02",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 942,
    "section_title": "OneOf trait",
    "h2_title": "OneOf trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\n// Enforce that target of relationship is child of Food\nauto Food = world.entity();\nauto Eats = world.entity().add(flecs::OneOf, Food);\nauto Apples = world.entity().child_of(Food);\nauto Fork = world.entity();\n\n// This is ok, Apples is a child of Food\nauto a = world.entity().add(Eats, Apples);\n\nHIDE: if (false) {\n// This is not ok, Fork is not a child of Food\nauto b = world.entity().add(Eats, Fork);\nHIDE: }",
    "clean_code": "flecs::world world;\n// Enforce that target of relationship is child of Food\nauto Food = world.entity();\nauto Eats = world.entity().add(flecs::OneOf, Food);\nauto Apples = world.entity().child_of(Food);\nauto Fork = world.entity();\n\n// This is ok, Apples is a child of Food\nauto a = world.entity().add(Eats, Apples);\n\nif (false) {\n// This is not ok, Fork is not a child of Food\nauto b = world.entity().add(Eats, Fork);\n}"
  },
  {
    "test_name": "OnInstantiate_trait_Override_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1035,
    "section_title": "Override",
    "h2_title": "OnInstantiate trait",
    "h3_title": "Override",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world ecs;\n// Register component with trait. Optional, since this is the default behavior.\necs.component<Mass>().add(flecs::OnInstantiate, flecs::Override);\n\nflecs::entity base = ecs.entity().set(Mass { 100 });\nflecs::entity inst = ecs.entity().is_a(base); // Mass is copied to inst\n\nassert(inst.owns<Mass>());\nassert(base.try_get<Mass>() != inst.try_get<Mass>());",
    "clean_code": "flecs::world ecs;\n// Register component with trait. Optional, since this is the default behavior.\necs.component<Mass>().add(flecs::OnInstantiate, flecs::Override);\n\nflecs::entity base = ecs.entity().set(Mass { 100 });\nflecs::entity inst = ecs.entity().is_a(base); // Mass is copied to inst\n\nassert(inst.owns<Mass>());\nassert(base.try_get<Mass>() != inst.try_get<Mass>());"
  },
  {
    "test_name": "OnInstantiate_trait_Inherit_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1112,
    "section_title": "Inherit",
    "h2_title": "OnInstantiate trait",
    "h3_title": "Inherit",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world ecs;\n// Register component with trait\necs.component<Mass>().add(flecs::OnInstantiate, flecs::Inherit);\n\nflecs::entity base = ecs.entity().set(Mass { 100 });\nflecs::entity inst = ecs.entity().is_a(base);\n\nassert(inst.has<Mass>());\nassert(!inst.owns<Mass>());\nassert(base.try_get<Mass>() == inst.try_get<Mass>());",
    "clean_code": "flecs::world ecs;\n// Register component with trait\necs.component<Mass>().add(flecs::OnInstantiate, flecs::Inherit);\n\nflecs::entity base = ecs.entity().set(Mass { 100 });\nflecs::entity inst = ecs.entity().is_a(base);\n\nassert(inst.has<Mass>());\nassert(!inst.owns<Mass>());\nassert(base.try_get<Mass>() == inst.try_get<Mass>());"
  },
  {
    "test_name": "OnInstantiate_trait_DontInherit_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1192,
    "section_title": "DontInherit",
    "h2_title": "OnInstantiate trait",
    "h3_title": "DontInherit",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world ecs;\n// Register component with trait\necs.component<Mass>().add(flecs::OnInstantiate, flecs::DontInherit);\n\nflecs::entity base = ecs.entity().set(Mass { 100 });\nflecs::entity inst = ecs.entity().is_a(base);\n\nassert(!inst.has<Mass>());\nassert(!inst.owns<Mass>());\nassert(inst.try_get<Mass>() == nullptr);",
    "clean_code": "flecs::world ecs;\n// Register component with trait\necs.component<Mass>().add(flecs::OnInstantiate, flecs::DontInherit);\n\nflecs::entity base = ecs.entity().set(Mass { 100 });\nflecs::entity inst = ecs.entity().is_a(base);\n\nassert(!inst.has<Mass>());\nassert(!inst.owns<Mass>());\nassert(inst.try_get<Mass>() == nullptr);"
  },
  {
    "test_name": "OrderedChildren_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1282,
    "section_title": "OrderedChildren trait",
    "h2_title": "OrderedChildren trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nflecs::entity parent = world.entity().add(flecs::OrderedChildren);\n\nflecs::entity child_1 = world.entity().child_of(parent);\nflecs::entity child_2 = world.entity().child_of(parent);\nflecs::entity child_3 = world.entity().child_of(parent);\n\n// Adding/removing components usually changes the order in which children are\n// iterated, but with the OrderedChildren trait order is preserved.\nchild_2.set(Position{10, 20});\n\nparent.children([](flecs::entity child) {\n    // 1st result: child_1\n    // 2nd result: child_2\n    // 3rd result: child_3\n});",
    "clean_code": "flecs::world world;\nflecs::entity parent = world.entity().add(flecs::OrderedChildren);\n\nflecs::entity child_1 = world.entity().child_of(parent);\nflecs::entity child_2 = world.entity().child_of(parent);\nflecs::entity child_3 = world.entity().child_of(parent);\n\n// Adding/removing components usually changes the order in which children are\n// iterated, but with the OrderedChildren trait order is preserved.\nchild_2.set(Position{10, 20});\n\nparent.children([](flecs::entity child) {\n    // 1st result: child_1\n    // 2nd result: child_2\n    // 3rd result: child_3\n});"
  },
  {
    "test_name": "PairIsTag_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1379,
    "section_title": "PairIsTag trait",
    "h2_title": "PairIsTag trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world ecs;\nstruct Serializable { }; // Tag, contains no data\n\nstruct Position {\n  float x, y;\n};\n\nauto e = ecs.entity()\n  .set<Position>({10, 20})\n  .add<Serializable, Position>(); // Because Serializable is a tag, the pair\n                                  // has a value of type Position\n\n// Gets value from Position component\nconst Position& p = e.get<Position>();\n\n// Gets (unintended) value from (Serializable, Position) pair\nconst Position& p2 = e.get<flecs::pair<Serializable, Position>>();",
    "clean_code": "flecs::world ecs;\nstruct Serializable { }; // Tag, contains no data\n\nstruct Position {\n  float x, y;\n};\n\nauto e = ecs.entity()\n  .set<Position>({10, 20})\n  .add<Serializable, Position>(); // Because Serializable is a tag, the pair\n                                  // has a value of type Position\n\n// Gets value from Position component\nconst Position& p = e.get<Position>();\n\n// Gets (unintended) value from (Serializable, Position) pair\nconst Position& p2 = e.get<flecs::pair<Serializable, Position>>();"
  },
  {
    "test_name": "PairIsTag_trait_02",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1478,
    "section_title": "PairIsTag trait",
    "h2_title": "PairIsTag trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world ecs;\nHIDE: struct Serializable { }; // Tag, contains no data\n// Ensure that Serializable never contains data\necs.component<Serializable>()\n  .add(flecs::PairIsTag);\n\nauto e = ecs.entity()\n  .set<Position>({10, 20})\n  .add<Serializable, Position>(); // Because Serializable marked as a Tag, no\n                                  // data is added for the pair even though\n                                  // Position is a component\n\n// Gets value from Position component\nconst Position& p = e.get<Position>();\n\nHIDE: if (false) {\n// This no longer works, the pair has no data\nconst Position& p2 = e.get<flecs::pair<Serializable, Position>>();\nHIDE: }",
    "clean_code": "flecs::world ecs;\nstruct Serializable { }; // Tag, contains no data\n// Ensure that Serializable never contains data\necs.component<Serializable>()\n  .add(flecs::PairIsTag);\n\nauto e = ecs.entity()\n  .set<Position>({10, 20})\n  .add<Serializable, Position>(); // Because Serializable marked as a Tag, no\n                                  // data is added for the pair even though\n                                  // Position is a component\n\n// Gets value from Position component\nconst Position& p = e.get<Position>();\n\nif (false) {\n// This no longer works, the pair has no data\nconst Position& p2 = e.get<flecs::pair<Serializable, Position>>();\n}"
  },
  {
    "test_name": "Relationship_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1558,
    "section_title": "Relationship trait",
    "h2_title": "Relationship trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nstruct Likes { };\nstruct Apples { };\n\nworld.component<Likes>().add(flecs::Relationship);\n\nHIDE: if (false) {\nflecs::entity e = world.entity()\n  .add<Likes>()          // Panic, 'Likes' is not used as relationship\n  .add<Apples, Likes>()  // Panic, 'Likes' is not used as relationship\n  .add<Likes, Apples>(); // OK\nHIDE: }",
    "clean_code": "flecs::world world;\nstruct Likes { };\nstruct Apples { };\n\nworld.component<Likes>().add(flecs::Relationship);\n\nif (false) {\nflecs::entity e = world.entity()\n  .add<Likes>()          // Panic, 'Likes' is not used as relationship\n  .add<Apples, Likes>()  // Panic, 'Likes' is not used as relationship\n  .add<Likes, Apples>(); // OK\n}"
  },
  {
    "test_name": "Relationship_trait_02",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1633,
    "section_title": "Relationship trait",
    "h2_title": "Relationship trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nstruct Likes { };\nstruct Loves { };\n\nworld.component<Likes>().add(flecs::Relationship);\n\n// Even though Likes is marked as relationship and used as target here, this \n// won't panic as With is marked as trait.\nworld.component<Loves>().add(flecs::With, world.component<Likes>());",
    "clean_code": "flecs::world world;\nstruct Likes { };\nstruct Loves { };\n\nworld.component<Likes>().add(flecs::Relationship);\n\n// Even though Likes is marked as relationship and used as target here, this \n// won't panic as With is marked as trait.\nworld.component<Loves>().add(flecs::With, world.component<Likes>());"
  },
  {
    "test_name": "Singleton_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1737,
    "section_title": "Singleton trait",
    "h2_title": "Singleton trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nHIDE: struct TimeOfDay { int hour; };\nworld.component<TimeOfDay>().add(flecs::Singleton);\n\nworld.set(TimeOfDay{0});\n\n// This is the same as adding TimeOfDay to itself:\nworld.component<TimeOfDay>().set(TimeOfDay{0});",
    "clean_code": "flecs::world world;\nstruct TimeOfDay { int hour; };\nworld.component<TimeOfDay>().add(flecs::Singleton);\n\nworld.set(TimeOfDay{0});\n\n// This is the same as adding TimeOfDay to itself:\nworld.component<TimeOfDay>().set(TimeOfDay{0});"
  },
  {
    "test_name": "Singleton_trait_02",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1813,
    "section_title": "Singleton trait",
    "h2_title": "Singleton trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nHIDE: struct TimeOfDay { int hour; };\nworld.component<TimeOfDay>().add(flecs::Singleton);\n\n// Automatically matches TimeOfDay as singleton\nauto q = world.query<Position, Velocity, const TimeOfDay>();\n\n// Is the same as\nauto q2 = world.query_builder<Position, Velocity, const TimeOfDay>()\n  .term_at(2).src<TimeOfDay>()\n  .build();",
    "clean_code": "flecs::world world;\nstruct TimeOfDay { int hour; };\nworld.component<TimeOfDay>().add(flecs::Singleton);\n\n// Automatically matches TimeOfDay as singleton\nauto q = world.query<Position, Velocity, const TimeOfDay>();\n\n// Is the same as\nauto q2 = world.query_builder<Position, Velocity, const TimeOfDay>()\n  .term_at(2).src<TimeOfDay>()\n  .build();"
  },
  {
    "test_name": "Sparse_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1882,
    "section_title": "Sparse trait",
    "h2_title": "Sparse trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nworld.component<Position>().add(flecs::Sparse);",
    "clean_code": "flecs::world world;\nworld.component<Position>().add(flecs::Sparse);"
  },
  {
    "test_name": "Symmetric_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1925,
    "section_title": "Symmetric trait",
    "h2_title": "Symmetric trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nauto MarriedTo = world.entity().add(flecs::Symmetric);\nauto Bob = world.entity();\nauto Alice = world.entity();\nBob.add(MarriedTo, Alice); // Also adds (MarriedTo, Bob) to Alice",
    "clean_code": "flecs::world world;\nauto MarriedTo = world.entity().add(flecs::Symmetric);\nauto Bob = world.entity();\nauto Alice = world.entity();\nBob.add(MarriedTo, Alice); // Also adds (MarriedTo, Bob) to Alice"
  },
  {
    "test_name": "Target_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 1979,
    "section_title": "Target trait",
    "h2_title": "Target trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nstruct Likes { };\nstruct Apples { };\n\nworld.component<Apples>().add(flecs::Target);\n\nHIDE: if (false) {\nflecs::entity e = world.entity()\n  .add<Apples>()         // Panic, 'Apples' is not used as target\n  .add<Apples, Likes>()  // Panic, 'Apples' is not used as target\n  .add<Likes, Apples>(); // OK\nHIDE: }",
    "clean_code": "flecs::world world;\nstruct Likes { };\nstruct Apples { };\n\nworld.component<Apples>().add(flecs::Target);\n\nif (false) {\nflecs::entity e = world.entity()\n  .add<Apples>()         // Panic, 'Apples' is not used as target\n  .add<Apples, Likes>()  // Panic, 'Apples' is not used as target\n  .add<Likes, Apples>(); // OK\n}"
  },
  {
    "test_name": "Trait_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 2048,
    "section_title": "Trait trait",
    "h2_title": "Trait trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nstruct Serializable { };\n\nworld.component<Serializable>().add(flecs::Trait);",
    "clean_code": "flecs::world world;\nstruct Serializable { };\n\nworld.component<Serializable>().add(flecs::Trait);"
  },
  {
    "test_name": "Transitive_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 2118,
    "section_title": "Transitive trait",
    "h2_title": "Transitive trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nauto LocatedIn = world.entity();\nauto Manhattan = world.entity();\nauto NewYork = world.entity();\nauto USA = world.entity();\n\nManhattan.add(LocatedIn, NewYork);\nNewYork.add(LocatedIn, USA);",
    "clean_code": "flecs::world world;\nauto LocatedIn = world.entity();\nauto Manhattan = world.entity();\nauto NewYork = world.entity();\nauto USA = world.entity();\n\nManhattan.add(LocatedIn, NewYork);\nNewYork.add(LocatedIn, USA);"
  },
  {
    "test_name": "Transitive_trait_02",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 2172,
    "section_title": "Transitive trait",
    "h2_title": "Transitive trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nHIDE: flecs::entity LocatedIn = world.entity();\nLocatedIn.add(flecs::Transitive);",
    "clean_code": "flecs::world world;\nflecs::entity LocatedIn = world.entity();\nLocatedIn.add(flecs::Transitive);"
  },
  {
    "test_name": "With_trait_01",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 2221,
    "section_title": "With trait",
    "h2_title": "With trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nauto Responsibility = world.entity();\nauto Power = world.entity().add(flecs::With, Responsibility);\n\n// Create new entity that has both Power and Responsibility\nauto e = world.entity().add(Power);",
    "clean_code": "flecs::world world;\nauto Responsibility = world.entity();\nauto Power = world.entity().add(flecs::With, Responsibility);\n\n// Create new entity that has both Power and Responsibility\nauto e = world.entity().add(Power);"
  },
  {
    "test_name": "With_trait_02",
    "language": "cpp",
    "file_path": "docs/ComponentTraits.md",
    "line_number": 2274,
    "section_title": "With trait",
    "h2_title": "With trait",
    "h3_title": "",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nauto Likes = world.entity();\nauto Loves = world.entity().add(flecs::With, Likes);\nauto Pears = world.entity();\n\n// Create new entity with both (Loves, Pears) and (Likes, Pears)\nauto e = world.entity().add(Loves, Pears);",
    "clean_code": "flecs::world world;\nauto Likes = world.entity();\nauto Loves = world.entity().add(flecs::With, Likes);\nauto Pears = world.entity();\n\n// Create new entity with both (Loves, Pears) and (Likes, Pears)\nauto e = world.entity().add(Loves, Pears);"
  },
  {
    "test_name": "Entities_Creation_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 35,
    "section_title": "Creation",
    "h2_title": "Entities",
    "h3_title": "Creation",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nflecs::entity my_entity = world.entity();",
    "clean_code": "flecs::world world;\nflecs::entity my_entity = world.entity();"
  },
  {
    "test_name": "Entities_Deletion_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 75,
    "section_title": "Deletion",
    "h2_title": "Entities",
    "h3_title": "Deletion",
    "h4_title": "",
    "test_number": 1,
    "code": "flecs::world world;\nHIDE: flecs::entity my_entity = world.entity();\nmy_entity.destruct();",
    "clean_code": "flecs::world world;\nflecs::entity my_entity = world.entity();\nmy_entity.destruct();"
  },
  {
    "test_name": "Entities_Deletion_02",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 121,
    "section_title": "Deletion",
    "h2_title": "Entities",
    "h3_title": "Deletion",
    "h4_title": "",
    "test_number": 2,
    "code": "flecs::world world;\nHIDE: struct Npc {};\n\nflecs::entity e1 = world.entity(); // Returns 500v0\ne1.destruct(); // Recycles 500\n\nflecs::entity e2 = world.entity(); // Returns 500v1\n\ne1.add<Npc>(); // Fails, 500v0 is not alive\ne2.add<Npc>(); // OK, 500v1 is alive",
    "clean_code": "flecs::world world;\nstruct Npc {};\n\nflecs::entity e1 = world.entity(); // Returns 500v0\ne1.destruct(); // Recycles 500\n\nflecs::entity e2 = world.entity(); // Returns 500v1\n\ne1.add<Npc>(); // Fails, 500v0 is not alive\ne2.add<Npc>(); // OK, 500v1 is alive"
  },
  {
    "test_name": "Entities_Deletion_03",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 178,
    "section_title": "Deletion",
    "h2_title": "Entities",
    "h3_title": "Deletion",
    "h4_title": "",
    "test_number": 3,
    "code": "HIDE: flecs::world world;\nflecs::entity e1 = world.entity();\ne1.destruct();\ne1.destruct(); // OK: post condition is satisfied",
    "clean_code": "flecs::world world;\nflecs::entity e1 = world.entity();\ne1.destruct();\ne1.destruct(); // OK: post condition is satisfied"
  },
  {
    "test_name": "Entities_Clearing_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 220,
    "section_title": "Clearing",
    "h2_title": "Entities",
    "h3_title": "Clearing",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nHIDE: flecs::entity my_entity = world.entity();\nmy_entity.clear();",
    "clean_code": "flecs::world world;\nflecs::entity my_entity = world.entity();\nmy_entity.clear();"
  },
  {
    "test_name": "Entities_Liveliness_Checking_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 262,
    "section_title": "Liveliness Checking",
    "h2_title": "Entities",
    "h3_title": "Liveliness Checking",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nflecs::entity e1 = world.entity();\nflecs::entity e2 = world.entity();\ne1.destruct();\n\ne1.is_alive(); // False\ne2.is_alive(); // True",
    "clean_code": "flecs::world world;\nflecs::entity e1 = world.entity();\nflecs::entity e2 = world.entity();\ne1.destruct();\n\ne1.is_alive(); // False\ne2.is_alive(); // True"
  },
  {
    "test_name": "Entities_Liveliness_Checking_02",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 317,
    "section_title": "Liveliness Checking",
    "h2_title": "Entities",
    "h3_title": "Liveliness Checking",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nflecs::entity e1 = world.entity();\nflecs::entity e2 = world.entity();\ne1.destruct();\n\ne1.is_valid(); // False\nworld.entity(0).is_valid(); // False",
    "clean_code": "flecs::world world;\nflecs::entity e1 = world.entity();\nflecs::entity e2 = world.entity();\ne1.destruct();\n\ne1.is_valid(); // False\nworld.entity(0).is_valid(); // False"
  },
  {
    "test_name": "Entities_Manual_Ids_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 368,
    "section_title": "Manual Ids",
    "h2_title": "Entities",
    "h3_title": "Manual Ids",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nflecs::entity e = world.make_alive(1000);",
    "clean_code": "flecs::world world;\nflecs::entity e = world.make_alive(1000);"
  },
  {
    "test_name": "Entities_Manual_Versioning_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 406,
    "section_title": "Manual Versioning",
    "h2_title": "Entities",
    "h3_title": "Manual Versioning",
    "h4_title": "",
    "test_number": 1,
    "code": "flecs::world world;\nHIDE: flecs::entity versioned_id = world.entity();\nworld.set_version(versioned_id);",
    "clean_code": "flecs::world world;\nflecs::entity versioned_id = world.entity();\nworld.set_version(versioned_id);"
  },
  {
    "test_name": "Entities_Ranges_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 444,
    "section_title": "Ranges",
    "h2_title": "Entities",
    "h3_title": "Ranges",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nworld.set_entity_range(5000, 0);",
    "clean_code": "flecs::world world;\nworld.set_entity_range(5000, 0);"
  },
  {
    "test_name": "Entities_Ranges_02",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 479,
    "section_title": "Ranges",
    "h2_title": "Entities",
    "h3_title": "Ranges",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nworld.set_entity_range(5000, 10000);",
    "clean_code": "flecs::world world;\nworld.set_entity_range(5000, 10000);"
  },
  {
    "test_name": "Entities_Ranges_03",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 518,
    "section_title": "Ranges",
    "h2_title": "Entities",
    "h3_title": "Ranges",
    "h4_title": "",
    "test_number": 3,
    "code": "HIDE: flecs::world world;\nworld.enable_range_check();",
    "clean_code": "flecs::world world;\nworld.enable_range_check();"
  },
  {
    "test_name": "Entities_Names_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 562,
    "section_title": "Names",
    "h2_title": "Entities",
    "h3_title": "Names",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nflecs::entity e = world.entity(\"MyEntity\");\n\nif (e == world.lookup(\"MyEntity\")) {\n    // true\n}\n\nstd::cout << e.name() << std::endl;",
    "clean_code": "flecs::world world;\nflecs::entity e = world.entity(\"MyEntity\");\n\nif (e == world.lookup(\"MyEntity\")) {\n    // true\n}\n\nstd::cout << e.name() << std::endl;"
  },
  {
    "test_name": "Entities_Names_02",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 618,
    "section_title": "Names",
    "h2_title": "Entities",
    "h3_title": "Names",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nflecs::entity p = world.entity(\"Parent\");\nflecs::entity e = world.entity(\"Child\").child_of(p);\n\nif (e == world.lookup(\"Parent::Child\")) {\n    // true\n}",
    "clean_code": "flecs::world world;\nflecs::entity p = world.entity(\"Parent\");\nflecs::entity e = world.entity(\"Child\").child_of(p);\n\nif (e == world.lookup(\"Parent::Child\")) {\n    // true\n}"
  },
  {
    "test_name": "Entities_Names_03",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 672,
    "section_title": "Names",
    "h2_title": "Entities",
    "h3_title": "Names",
    "h4_title": "",
    "test_number": 3,
    "code": "HIDE: flecs::world world;\nflecs::entity p = world.entity(\"Parent\");\nflecs::entity e = world.entity(\"Child\").child_of(p);\n\nif (e == p.lookup(\"Child\")) {\n    // true\n}",
    "clean_code": "flecs::world world;\nflecs::entity p = world.entity(\"Parent\");\nflecs::entity e = world.entity(\"Child\").child_of(p);\n\nif (e == p.lookup(\"Child\")) {\n    // true\n}"
  },
  {
    "test_name": "Entities_Names_04",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 731,
    "section_title": "Names",
    "h2_title": "Entities",
    "h3_title": "Names",
    "h4_title": "",
    "test_number": 4,
    "code": "HIDE: flecs::world world;\nflecs::entity p = world.entity(\"Parent\");\nflecs::entity e = world.entity(\"Child\").child_of(p);\n\n// Returns entity name, does not allocate\nstd::cout << e.name() << std::endl; // Child\n\n// Returns entity path, does allocate\nstd::cout << e.path() << std::endl; // Parent.Child",
    "clean_code": "flecs::world world;\nflecs::entity p = world.entity(\"Parent\");\nflecs::entity e = world.entity(\"Child\").child_of(p);\n\n// Returns entity name, does not allocate\nstd::cout << e.name() << std::endl; // Child\n\n// Returns entity path, does allocate\nstd::cout << e.path() << std::endl; // Parent.Child"
  },
  {
    "test_name": "Entities_Names_05",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 792,
    "section_title": "Names",
    "h2_title": "Entities",
    "h3_title": "Names",
    "h4_title": "",
    "test_number": 5,
    "code": "HIDE: flecs::world world;\nflecs::entity e1 = world.entity(\"Parent::Child\");\nflecs::entity e2 = world.entity(\"Parent::Child\");\n\nif (e1 == e2) {\n    // true\n}",
    "clean_code": "flecs::world world;\nflecs::entity e1 = world.entity(\"Parent::Child\");\nflecs::entity e2 = world.entity(\"Parent::Child\");\n\nif (e1 == e2) {\n    // true\n}"
  },
  {
    "test_name": "Entities_Names_06",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 844,
    "section_title": "Names",
    "h2_title": "Entities",
    "h3_title": "Names",
    "h4_title": "",
    "test_number": 6,
    "code": "HIDE: flecs::world world;\nflecs::entity e = world.entity(\"Foo\");\n\n// Change name\ne.set_name(\"Bar\");",
    "clean_code": "flecs::world world;\nflecs::entity e = world.entity(\"Foo\");\n\n// Change name\ne.set_name(\"Bar\");"
  },
  {
    "test_name": "Entities_Names_07",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 887,
    "section_title": "Names",
    "h2_title": "Entities",
    "h3_title": "Names",
    "h4_title": "",
    "test_number": 7,
    "code": "HIDE: flecs::world world;\nflecs::entity ten = world.entity(\"10\");\nflecs::entity twenty = world.entity(\"20\");",
    "clean_code": "flecs::world world;\nflecs::entity ten = world.entity(\"10\");\nflecs::entity twenty = world.entity(\"20\");"
  },
  {
    "test_name": "Entities_Disabling_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 934,
    "section_title": "Disabling",
    "h2_title": "Entities",
    "h3_title": "Disabling",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nflecs::entity e = world.entity();\n\n// Enable entity\ne.enable();\n\n// Disable entity\ne.disable();",
    "clean_code": "flecs::world world;\nflecs::entity e = world.entity();\n\n// Enable entity\ne.enable();\n\n// Disable entity\ne.disable();"
  },
  {
    "test_name": "Entities_Disabling_02",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1000,
    "section_title": "Disabling",
    "h2_title": "Entities",
    "h3_title": "Disabling",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\n// Three entities to disable\nflecs::entity e1 = world.entity();\nflecs::entity e2 = world.entity();\nflecs::entity e3 = world.entity();\n\n// Create prefab that has the three entities\nflecs::entity p = world.prefab();\np.add(e1);\np.add(e2);\np.add(e3);\n\n// Disable entities\np.disable();\n\n// Enable entities\np.enable();",
    "clean_code": "flecs::world world;\n// Three entities to disable\nflecs::entity e1 = world.entity();\nflecs::entity e2 = world.entity();\nflecs::entity e3 = world.entity();\n\n// Create prefab that has the three entities\nflecs::entity p = world.prefab();\np.add(e1);\np.add(e2);\np.add(e3);\n\n// Disable entities\np.disable();\n\n// Enable entities\np.enable();"
  },
  {
    "test_name": "Entities_Disabling_03",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1098,
    "section_title": "Disabling",
    "h2_title": "Entities",
    "h3_title": "Disabling",
    "h4_title": "",
    "test_number": 3,
    "code": "HIDE: flecs::world world;\n// Three entities to disable\nflecs::entity e1 = world.entity();\nflecs::entity e2 = world.entity();\nflecs::entity e3 = world.entity();\n\n// Create prefab hierarchy with the three entities\nflecs::entity p1 = world.prefab()\n    .add(e1);\n\nflecs::entity p2 = world.prefab()\n    .is_a(p1)\n    .add(e2)\n    .add(e3);\n\n// Disable e1, e2, e3\np2.disable();\n\n// Enable e1\np1.enable();",
    "clean_code": "flecs::world world;\n// Three entities to disable\nflecs::entity e1 = world.entity();\nflecs::entity e2 = world.entity();\nflecs::entity e3 = world.entity();\n\n// Create prefab hierarchy with the three entities\nflecs::entity p1 = world.prefab()\n    .add(e1);\n\nflecs::entity p2 = world.prefab()\n    .is_a(p1)\n    .add(e2)\n    .add(e3);\n\n// Disable e1, e2, e3\np2.disable();\n\n// Enable e1\np1.enable();"
  },
  {
    "test_name": "Entities_Disabling_04",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1182,
    "section_title": "Disabling",
    "h2_title": "Entities",
    "h3_title": "Disabling",
    "h4_title": "",
    "test_number": 4,
    "code": "HIDE: flecs::world world;\nHIDE: flecs::entity e = world.entity();\ne.add(flecs::Disabled);",
    "clean_code": "flecs::world world;\nflecs::entity e = world.entity();\ne.add(flecs::Disabled);"
  },
  {
    "test_name": "Components_Hooks_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1327,
    "section_title": "Hooks",
    "h2_title": "Components",
    "h3_title": "Hooks",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nworld.component<Position>()\n    .on_set([](Position& p) {\n        std::cout << \"{\" << p.x << \", \" << p.y << \"}\" << std::endl;\n    });",
    "clean_code": "flecs::world world;\nworld.component<Position>()\n    .on_set([](Position& p) {\n        std::cout << \"{\" << p.x << \", \" << p.y << \"}\" << std::endl;\n    });"
  },
  {
    "test_name": "Components_Hooks_02",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1393,
    "section_title": "Hooks",
    "h2_title": "Components",
    "h3_title": "Hooks",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nworld.component<Position>()\n    .on_replace([](Position& prev, Position& next) {\n        std::cout << \"prev = {\" << prev.x << \", \" << prev.y << \"}\" << std::endl;\n        std::cout << \"next = {\" << next.x << \", \" << next.y << \"}\" << std::endl;\n    });",
    "clean_code": "flecs::world world;\nworld.component<Position>()\n    .on_replace([](Position& prev, Position& next) {\n        std::cout << \"prev = {\" << prev.x << \", \" << prev.y << \"}\" << std::endl;\n        std::cout << \"next = {\" << next.x << \", \" << next.y << \"}\" << std::endl;\n    });"
  },
  {
    "test_name": "Components_Components_have_entity_handles_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1449,
    "section_title": "Components have entity handles",
    "h2_title": "Components",
    "h3_title": "Components have entity handles",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\n// Get the entity for the Position component\nflecs::entity pos = world.component<Position>();\n\n// Component entities have the Component component\nconst flecs::Component& comp_data = pos.get<flecs::Component>();\n\nstd::cout << \"{size: \" << comp_data.size << \", \" \n          << comp_data.alignment << \"}\\n\";",
    "clean_code": "flecs::world world;\n// Get the entity for the Position component\nflecs::entity pos = world.component<Position>();\n\n// Component entities have the Component component\nconst flecs::Component& comp_data = pos.get<flecs::Component>();\n\nstd::cout << \"{size: \" << comp_data.size << \", \" \n          << comp_data.alignment << \"}\\n\";"
  },
  {
    "test_name": "Components_Components_have_entity_handles_02",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1508,
    "section_title": "Components have entity handles",
    "h2_title": "Components",
    "h3_title": "Components have entity handles",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\n// Register a sparse component\nworld.component<Position>().add(flecs::Sparse);",
    "clean_code": "flecs::world world;\n// Register a sparse component\nworld.component<Position>().add(flecs::Sparse);"
  },
  {
    "test_name": "Components_Registration_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1636,
    "section_title": "Registration",
    "h2_title": "Components",
    "h3_title": "Registration",
    "h4_title": "",
    "test_number": 1,
    "code": "flecs::world world;\nflecs::entity e1 = world.entity()\n    .set(Position{10, 20}) // Position registered here\n    .set(Velocity{1, 2}); // Velocity registered here\nflecs::entity e2 = world.entity()\n    .set(Position{10, 20}) // Position already registered\n    .set(Velocity{1, 2}); // Velocity already registered",
    "clean_code": "flecs::world world;\nflecs::entity e1 = world.entity()\n    .set(Position{10, 20}) // Position registered here\n    .set(Velocity{1, 2}); // Velocity registered here\nflecs::entity e2 = world.entity()\n    .set(Position{10, 20}) // Position already registered\n    .set(Velocity{1, 2}); // Velocity already registered"
  },
  {
    "test_name": "Components_Registration_02",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1654,
    "section_title": "Registration",
    "h2_title": "Components",
    "h3_title": "Registration",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nworld.component<Position>();",
    "clean_code": "flecs::world world;\nworld.component<Position>();"
  },
  {
    "test_name": "Components_Registration_03",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1663,
    "section_title": "Registration",
    "h2_title": "Components",
    "h3_title": "Registration",
    "h4_title": "",
    "test_number": 3,
    "code": "struct movement {\n    movement(flecs::world& world) {\n        world.component<Position>();\n        world.component<Velocity>();\n    }\n};\n\n    flecs::world world;\n\n    world.import<movement>();\n",
    "clean_code": "struct movement {\n    movement(flecs::world& world) {\n        world.component<Position>();\n        world.component<Velocity>();\n    }\n};\n\n    flecs::world world;\n\n    world.import<movement>();\n"
  },
  {
    "test_name": "Components_Registration_Runtime_Type_Registration_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1819,
    "section_title": "Runtime Type Registration",
    "h2_title": "Components",
    "h3_title": "Registration",
    "h4_title": "Runtime Type Registration",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\necs_component_desc_t desc = {0};\ndesc.type.size = 8;\ndesc.type.alignment = 8;\nflecs::entity_t comp = ecs_component_init(world, &desc);\n\nflecs::entity e = world.entity();\n\n// Add component\ne.add(comp);\n\n// Get component\nconst void *ptr = e.get(comp);",
    "clean_code": "flecs::world world;\necs_component_desc_t desc = {0};\ndesc.type.size = 8;\ndesc.type.alignment = 8;\nflecs::entity_t comp = ecs_component_init(world, &desc);\n\nflecs::entity e = world.entity();\n\n// Add component\ne.add(comp);\n\n// Get component\nconst void *ptr = e.get(comp);"
  },
  {
    "test_name": "Components_Registration_Runtime_Type_Registration_02",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1883,
    "section_title": "Runtime Type Registration",
    "h2_title": "Components",
    "h3_title": "Registration",
    "h4_title": "Runtime Type Registration",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\necs_component_desc_t desc = {0};\ndesc.entity = world.entity(\"MyComponent\");\ndesc.type.size = 8;\ndesc.type.alignment = 8;\nflecs::entity_t comp = ecs_component_init(world, &desc);\n\nflecs::entity e = world.entity();\n\n// Add component\ne.add(comp);\n\n// Get component\nconst void *ptr = e.get(comp);",
    "clean_code": "flecs::world world;\necs_component_desc_t desc = {0};\ndesc.entity = world.entity(\"MyComponent\");\ndesc.type.size = 8;\ndesc.type.alignment = 8;\nflecs::entity_t comp = ecs_component_init(world, &desc);\n\nflecs::entity e = world.entity();\n\n// Add component\ne.add(comp);\n\n// Get component\nconst void *ptr = e.get(comp);"
  },
  {
    "test_name": "Components_Unregistration_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 1944,
    "section_title": "Unregistration",
    "h2_title": "Components",
    "h3_title": "Unregistration",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nflecs::entity pos = world.component<Position>();\n\n// Create entity with Position\nflecs::entity e = world.entity().add<Position>();\n\n// Unregister the component\npos.destruct();\n\n// Position is removed from e",
    "clean_code": "flecs::world world;\nflecs::entity pos = world.component<Position>();\n\n// Create entity with Position\nflecs::entity e = world.entity().add<Position>();\n\n// Unregister the component\npos.destruct();\n\n// Position is removed from e"
  },
  {
    "test_name": "Components_Singletons_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 2011,
    "section_title": "Singletons",
    "h2_title": "Components",
    "h3_title": "Singletons",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\nHIDE: struct TimeOfDay { float value; };\n// Set singleton\nworld.set<TimeOfDay>({ 0.5 });\n\n// Get singleton\nconst TimeOfDay& t = world.get<TimeOfDay>();",
    "clean_code": "flecs::world world;\nstruct TimeOfDay { float value; };\n// Set singleton\nworld.set<TimeOfDay>({ 0.5 });\n\n// Get singleton\nconst TimeOfDay& t = world.get<TimeOfDay>();"
  },
  {
    "test_name": "Components_Singletons_02",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 2066,
    "section_title": "Singletons",
    "h2_title": "Components",
    "h3_title": "Singletons",
    "h4_title": "",
    "test_number": 2,
    "code": "HIDE: flecs::world world;\nHIDE: struct TimeOfDay { float value; };\n// Set singleton\nworld.set<TimeOfDay>({ 0.5 });\n\n// Equivalent to:\nworld.component<TimeOfDay>().set(TimeOfDay{ 0.5 });",
    "clean_code": "flecs::world world;\nstruct TimeOfDay { float value; };\n// Set singleton\nworld.set<TimeOfDay>({ 0.5 });\n\n// Equivalent to:\nworld.component<TimeOfDay>().set(TimeOfDay{ 0.5 });"
  },
  {
    "test_name": "Components_Disabling_01",
    "language": "cpp",
    "file_path": "docs/EntitiesComponents.md",
    "line_number": 2128,
    "section_title": "Disabling",
    "h2_title": "Components",
    "h3_title": "Disabling",
    "h4_title": "",
    "test_number": 1,
    "code": "HIDE: flecs::world world;\n// Register toggle-able component\nworld.component<Position>().add(flecs::CanToggle);\n\nflecs::entity e = world.entity().set(Position{10, 20});\n\n// Disable component\ne.disable<Position>();\ne.enabled<Position>(); // False\n\n// Enable component\ne.enable<Position>();\ne.enabled<Position>();  // True",
    "clean_code": "flecs::world world;\n// Register toggle-able component\nworld.component<Position>().add(flecs::CanToggle);\n\nflecs::entity e = world.entity().set(Position{10, 20});\n\n// Disable component\ne.disable<Position>();\ne.enabled<Position>(); // False\n\n// Enable component\ne.enable<Position>();\ne.enabled<Position>();  // True"
  }
]