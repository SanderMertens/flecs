language: c

matrix:
  include:
  - os: linux
    sudo: required
    dist: precise
    compiler: gcc
    arch: amd64
    env: 
      - BUILD=amd64-precise-gcc
      - NO_CPP=true
      - NO_CMAKE=true
  - os: linux
    sudo: required
    dist: xenial
    compiler: gcc
    arch: amd64
    env: BUILD=amd64-xenial-gcc   
  - os: linux
    sudo: required
    dist: xenial
    compiler: clang
    arch: amd64
    env: BUILD=amd64-xenial-clang   
  - os: linux
    sudo: required
    dist: xenial
    compiler: gcc
    arch: arm64
    env: BUILD=arm64-xenial-gcc
  - os: linux
    sudo: required
    dist: bionic
    compiler: gcc
    arch: amd64
    env: BUILD=amd64-bionic-gcc
  - os: linux
    sudo: required
    dist: bionic
    compiler: clang
    arch: amd64
    env: BUILD=amd64-bionic-clang
  - os: linux
    sudo: required
    dist: bionic
    compiler: gcc
    arch: arm64
    env: BUILD=arm64-bionic-gcc
  - os: osx
    sudo: required
    osx_image: xcode11.2
    compiler: clang
    arch: amd64
    env: BUILD=amd64-xcode11.2-clang
  - os: osx
    sudo: required
    osx_image: xcode11.2
    compiler: clang
    arch: arm64
    env: BUILD=arm64-xcode11.2-clang
  - os: osx
    sudo: required
    osx_image: xcode6.4
    compiler: clang
    arch: amd64
    env: BUILD=amd64-xcode6.4-clang

install:
  - git clone https://github.com/SanderMertens/bake
  - make -C bake/build-$(uname)
  - bake/bake setup
  - if [[ -z "$NO_CMAKE" ]]; then mkdir build-cmake; fi
  - if [[ -z "$NO_CMAKE" ]]; then cd build-cmake; fi
  - if [[ -z "$NO_CMAKE" ]]; then cmake ..; fi
  - if [[ -z "$NO_CMAKE" ]]; then make; fi
  - if [[ -z "$NO_CMAKE" ]]; then cd ..; fi
  - bake
  - bake examples/c
  - if [[ -z "$NO_CPP" ]]; then bake examples/cpp; fi

script:
  - bake run test/api --cfg test
  - bake run test/collections --cfg test
  - if [[ -z "$NO_CPP" ]]; then bake run test/cpp_api --cfg test; fi

after_success:
  - bash <(curl -s https://codecov.io/bash)
