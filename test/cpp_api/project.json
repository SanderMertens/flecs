{
    "id": "cpp_api",
    "type": "application",
    "value": {
        "author": "Sander Mertens",
        "description": "Test project for flecs C++ API",
        "public": false,
        "coverage": false,
        "language": "c++",
        "use": [
            "flecs"
        ]
    },
    "test": {
        "testsuites": [{
            "id": "Entity",
            "testcases": [
                "new",
                "new_named",
                "new_named_from_scope",
                "new_nested_named_from_scope",
                "new_nested_named_from_nested_scope",
                "new_add",
                "new_add_2",
                "new_set",
                "new_set_2",
                "add",
                "add_2",
                "add_entity",
                "add_childof",
                "add_instanceof",
                "remove",
                "remove_2",
                "remove_entity",
                "remove_childof",
                "remove_instanceof",
                "set",
                "set_2",
                "emplace",
                "emplace_2",
                "emplace_after_add",
                "emplace_after_add_pair",
                "emplace_w_self_ctor",
                "get_generic",
                "get_mut_generic",
                "get_generic_w_id",
                "get_generic_w_id_t",
                "get_mut_generic_w_id",
                "get_mut_generic_w_id_t",
                "set_generic",
                "set_generic_w_id",
                "set_generic_w_id_t",
                "set_generic_no_size",
                "set_generic_no_size_w_id",
                "set_generic_no_size_w_id_t",
                "add_role",
                "remove_role",
                "has_role",
                "pair_role",
                "equals",
                "compare_0",
                "compare_id_t",
                "compare_id",
                "compare_literal",
                "greater_than",
                "less_than",
                "not_0_or_1",
                "not_true_or_false",
                "has_childof",
                "has_instanceof",
                "has_instanceof_indirect",
                "null_string",
                "set_name",
                "change_name",
                "delete",
                "clear",
                "foce_owned",
                "force_owned_2",
                "force_owned_nested",
                "tag_has_size_zero",
                "get_null_name",
                "get_parent",
                "is_component_enabled",
                "is_enabled_component_enabled",
                "is_disabled_component_enabled",
                "get_type",
                "get_nonempty_type",
                "set_no_copy",
                "set_copy",
                "set_deduced",
                "override",
                "set_override",
                "set_override_lvalue",
                "emplace_override",
                "implicit_name_to_char",
                "implicit_path_to_char",
                "implicit_type_str_to_char",
                "entity_to_entity_view",
                "entity_view_to_entity_world",
                "entity_view_to_entity_stage",
                "create_entity_view_from_stage",
                "set_template",
                "get_1_component_w_callback",
                "get_2_components_w_callback",
                "set_1_component_w_callback",
                "set_2_components_w_callback",
                "set_3_components_w_callback",
                "defer_set_1_component",
                "defer_set_2_components",
                "defer_set_3_components",
                "set_2_w_on_set",
                "defer_set_2_w_on_set",
                "set_2_after_fluent",
                "set_2_before_fluent",
                "set_2_after_set_1",
                "set_2_after_set_2",
                "with_self",
                "with_relation_type_self",
                "with_relation_self",
                "with_self_w_name",
                "with_self_nested",
                "with_after_builder_method",
                "with_before_builder_method",
                "with_scope",
                "with_scope_nested",
                "with_scope_nested_same_name_as_parent",
                "scope_after_builder_method",
                "scope_before_builder_method",                
                "no_recursive_lookup",
                "defer_new_w_name",
                "defer_new_w_nested_name",
                "defer_new_w_scope_name",
                "defer_new_w_scope_nested_name",
                "defer_new_w_deferred_scope_nested_name",
                "defer_new_w_scope",
                "defer_new_w_with",
                "defer_new_w_name_scope_with",
                "defer_w_with_implicit_component",
                "entity_id_str",
                "pair_id_str",
                "role_id_str",
                "id_str_from_entity_view",
                "id_str_from_entity",
                "null_entity",
                "null_entity_w_world",
                "null_entity_w_0",
                "null_entity_w_world_w_0",
                "entity_view_null_entity",
                "entity_view_null_entity_w_world",
                "entity_view_null_entity_w_0",
                "entity_view_null_entity_w_world_w_0",
                "is_wildcard",
                "has_id_t",
                "has_pair_id_t",
                "has_pair_id_t_w_type",
                "has_id",
                "has_pair_id",
                "has_pair_id_w_type",
                "has_wildcard_id",
                "has_wildcard_pair_id",
                "owns_id_t",
                "owns_pair_id_t",
                "owns_pair_id_t_w_type",
                "owns_id",
                "owns_pair_id",
                "owns_pair_id_w_type",
                "owns_wildcard_id",
                "owns_wildcard_pair",
                "id_from_world",
                "id_pair_from_world",
                "id_default_from_world",
                "is_a",
                "is_a_w_type",
                "child_of",
                "child_of_w_type",
                "id_get_entity",
                "id_get_invalid_entity",
                "each_in_stage",
                "iter_recycled_parent",
                "get_lambda_from_stage",
                "default_ctor",
                "get_obj_by_template",
                "create_named_twice_deferred",
                "clone",
                "clone_w_value",
                "clone_to_existing",
                "clone_to_existing_overlap",
                "set_doc_name",
                "set_doc_brief",
                "set_doc_detail",
                "set_doc_link",
                "entity_w_root_name",
                "entity_w_root_name_from_scope",
                "entity_w_type",
                "entity_w_nested_type",
                "entity_w_type_defer",
                "entity_array",
                "add_if_true_T",
                "add_if_false_T",
                "add_if_true_id",
                "add_if_false_id",
                "add_if_true_R_O",
                "add_if_false_R_O",
                "add_if_true_R_o",
                "add_if_false_R_o",
                "add_if_true_r_o"
            ]
        }, {
            "id": "Pairs",
            "testcases": [
                "add_component_pair",
                "add_tag_pair",
                "add_tag_pair_to_tag",
                "remove_component_pair",
                "remove_tag_pair",
                "remove_tag_pair_to_tag",                
                "set_component_pair",
                "set_tag_pair",
                "system_1_pair_instance",
                "system_2_pair_instances",
                "override_pair",
                "override_tag_pair",
                "get_mut_pair",
                "get_mut_pair_existing",
                "get_mut_pair_tag",
                "get_mut_pair_tag_existing",
                "get_relation_from_id",
                "get_w_object_from_id",
                "get_recycled_relation_from_id",
                "get_recycled_object_from_id",
                "get_rel_obj",
                "get_rel_obj_id",
                "get_rel_obj_id_t",
                "get_R_obj",
                "get_R_obj_id",
                "get_R_obj_id_t",
                "get_w_object",
                "get_w_object_id",
                "get_w_object_id_t",
                "each",
                "each_pair",
                "each_pair_by_type",
                "each_pair_w_isa",
                "each_pair_w_recycled_rel",
                "each_pair_w_recycled_obj",
                "match_pair",
                "match_pair_obj_wildcard",
                "match_pair_rel_wildcard",
                "match_pair_both_wildcard",
                "has_tag_w_object",
                "has_w_object_tag",
                "add_pair_type",
                "remove_pair_type",
                "set_pair_type",
                "has_pair_type",
                "get_1_pair_arg",
                "get_2_pair_arg",
                "set_1_pair_arg",
                "set_2_pair_arg",
                "get_inline_pair_type",
                "set_inline_pair_type",
                "get_pair_type_object",
                "set_pair_type_object",
                "set_get_w_object_variants",
                "get_object_for_type_self",
                "get_object_for_type_base",
                "get_object_for_id_self",
                "get_object_for_id_base",
                "get_object_for_id_not_found",
                "deref_pair",
                "deref_const_pair",
                "deref_pair_obj",
                "deref_const_pair_obj"
            ]
        }, {
            "id": "Enum",
            "testcases": [
                "standard_enum_reflection",
                "sparse_enum_reflection",
                "enum_class_reflection",
                "prefixed_enum_reflection",
                "constant_with_num_reflection",
                "get_constant_id",
                "add_enum_constant",
                "add_enum_class_constant",
                "replace_enum_constants",
                "has_enum",
                "has_enum_wildcard",
                "get_enum",
                "remove_enum",
                "remove_wildcard",
                "enum_as_component",
                "query_enum_wildcard",
                "query_enum_constant",
                "enum_type_from_stage",
                "add_enum_from_stage",
                "enum_w_2_worlds",
                "add_enum_constant_w_tag",
                "remove_enum_constant_w_tag",
                "set_enum_constant_w_tag",
                "enum_w_incorrect_size"
            ]
        }, {
            "id": "Switch",
            "testcases": [
                "add_case",
                "get_case",
                "system_w_case",
                "system_w_case_builder",
                "system_w_sw_type_builder",
                "system_w_switch",
                "add_case_w_type",
                "add_switch_w_type",
                "add_remove_switch_w_type",
                "switch_enum_type"
            ]
        }, {
            "id": "Paths",
            "testcases": [
                "name",
                "path_depth_1",
                "path_depth_2",
                "entity_lookup_name",
                "entity_lookup_depth_1",
                "entity_lookup_depth_2",
                "alias_component",
                "alias_scoped_component",
                "alias_scoped_component_w_name",
                "alias_entity",
                "alias_entity_by_name",
                "alias_entity_by_scoped_name"
            ]
        }, {
            "id": "Type",
            "testcases": [
                "type_no_name",
                "null_args",
                "has_type",
                "has_entity",
                "has_pair_type",
                "has_pair_entity",
                "get",
                "get_out_of_range",
                "has_from_stage",
                "type_from_iter",
                "type_from_staged_iter"
            ]
        }, {
            "id": "System",
            "testcases": [
                "iter",
                "iter_const",
                "iter_shared",
                "iter_optional",
                "each",
                "each_const",
                "each_shared",
                "each_optional",
                "signature",
                "signature_const",
                "signature_shared",
                "signature_optional",
                "copy_name_on_create",
                "nested_system",
                "empty_signature",
                "iter_tag",
                "each_tag",
                "set_interval",
                "order_by_type",
                "order_by_id",
                "order_by_type_after_create",
                "order_by_id_after_create",
                "get_query",
                "add_from_each",
                "delete_from_each",
                "add_from_each_world_handle",
                "new_from_each",
                "add_from_iter",
                "delete_from_iter",
                "add_from_iter_world_handle",
                "new_from_iter",
                "each_w_mut_children_it",
                "readonly_children_iter",
                "rate_filter",
                "update_rate_filter",
                "default_ctor",
                "test_auto_defer_each",
                "test_auto_defer_iter",
                "custom_pipeline",
                "system_w_self",
                "instanced_query_w_singleton_each",
                "instanced_query_w_base_each",
                "un_instanced_query_w_singleton_each",
                "un_instanced_query_w_base_each",
                "instanced_query_w_singleton_iter",
                "instanced_query_w_base_iter",
                "un_instanced_query_w_singleton_iter",
                "un_instanced_query_w_base_iter",
                "create_w_no_template_args",
                "system_w_type_kind",
                "system_w_type_kind_type_pipeline",
                "default_ctor",
                "entity_ctor"
            ]
        }, {
            "id": "Event",
            "testcases": [
                "evt_1_id_entity",
                "evt_2_ids_entity",
                "evt_1_id_table",
                "evt_2_ids_table",
                "evt_type",
                "evt_1_component",
                "evt_2_components",
                "evt_void_ctx",
                "evt_typed_ctx",
                "evt_implicit_typed_ctx",
                "evt_1_id_pair_rel_id_obj_id_entity",
                "evt_1_id_pair_rel_obj_id_entity",
                "evt_1_id_pair_rel_obj_entity",
                "emit_staged_from_world",
                "emit_staged_from_stage"
            ]
        }, {
            "id": "Iterable",
            "testcases": [
                "page_each",
                "page_iter",
                "worker_each",
                "worker_iter"
            ]
        }, {
            "id": "Query",
            "testcases": [
                "action",
                "action_const",
                "action_shared",
                "action_optional",
                "each",
                "each_const",
                "each_shared",
                "each_optional",
                "signature",
                "signature_const",
                "signature_shared",
                "signature_optional",
                "subquery",
                "subquery_w_expr",
                "query_single_pair",
                "tag_w_each",
                "shared_tag_w_each",
                "sort_by",
                "changed",
                "orphaned",
                "default_ctor",
                "default_ctor_no_assign",
                "expr_w_template",
                "query_type_w_template",
                "compare_term_id",
                "test_no_defer_each",
                "test_no_defer_iter",
                "inspect_terms",
                "inspect_terms_w_each",
                "comp_to_str",
                "pair_to_str",
                "oper_not_to_str",
                "oper_optional_to_str",
                "oper_or_to_str",
                "each_pair_type",
                "iter_pair_type",
                "term_pair_type",
                "each_no_entity_1_comp",
                "each_no_entity_2_comps",
                "iter_no_comps_1_comp",
                "iter_no_comps_2_comps",
                "iter_no_comps_no_comps",
                "each_pair_object",
                "iter_pair_object",
                "iter_query_in_system",
                "iter_type",
                "instanced_query_w_singleton_each",
                "instanced_query_w_base_each",
                "un_instanced_query_w_singleton_each",
                "un_instanced_query_w_base_each",
                "instanced_query_w_singleton_iter",
                "instanced_query_w_base_iter",
                "un_instanced_query_w_singleton_iter",
                "un_instanced_query_w_base_iter",
                "query_each_from_component",
                "query_iter_from_component",
                "query_each_w_func_ptr",
                "query_iter_w_func_ptr",
                "query_each_w_func_no_ptr",
                "query_iter_w_func_no_ptr",
                "query_each_w_iter",
                "change_tracking"
            ]
        }, {
            "id": "QueryBuilder",
            "testcases": [
                "builder_assign_same_type",
                "builder_assign_from_empty",
                "builder_assign_to_empty",
                "builder_build",
                "builder_build_to_auto",
                "builder_build_n_statements",
                "1_type",
                "add_1_type",
                "add_2_types",
                "add_1_type_w_1_type",
                "add_2_types_w_1_type",
                "add_pair",
                "add_not",
                "add_or",
                "add_optional",
                "ptr_type",
                "const_type",
                "string_term",
                "string_term_w_expr",
                "singleton_term",
                "isa_superset_term",
                "isa_self_superset_term",
                "childof_superset_term",
                "childof_self_superset_term",
                "isa_superset_term_w_each",
                "isa_self_superset_term_w_each",
                "childof_superset_term_w_each",
                "childof_self_superset_term_w_each",
                "isa_superset_shortcut",
                "isa_superset_shortcut_w_self",
                "childof_superset_shortcut",
                "childof_superset_shortcut_w_self",
                "isa_superset_max_depth_1",
                "isa_superset_max_depth_2",
                "isa_superset_min_depth_2",
                "isa_superset_min_depth_2_max_depth_3",
                "relation",
                "relation_w_object_wildcard",
                "relation_w_predicate_wildcard",
                "add_pair_w_rel_type",
                "template_term",
                "explicit_subject_w_id",
                "explicit_subject_w_type",
                "explicit_object_w_id",
                "explicit_object_w_type",
                "explicit_term",
                "explicit_term_w_type",
                "explicit_term_w_pair_type",
                "explicit_term_w_id",
                "explicit_term_w_pair_id",
                "1_term_to_empty",
                "2_subsequent_args",
                "optional_tag_is_set",
                "10_terms",
                "20_terms",
                "group_by_raw",
                "group_by_template",
                "create_w_no_template_args"
            ]         
        }, {
            "id": "FilterBuilder",
            "testcases": [
                "builder_assign_same_type",
                "builder_assign_from_empty",
                "builder_assign_to_empty",
                "builder_build",
                "builder_build_to_auto",
                "builder_build_n_statements",
                "builder_force_assign_operator",
                "1_type",
                "add_1_type",
                "add_2_types",
                "add_1_type_w_1_type",
                "add_2_types_w_1_type",
                "add_pair",
                "add_not",
                "add_or",
                "add_optional",
                "ptr_type",
                "const_type",
                "string_term",
                "singleton_term",
                "isa_superset_term",
                "isa_self_superset_term",
                "childof_superset_term",
                "childof_self_superset_term",
                "isa_superset_term_w_each",
                "isa_self_superset_term_w_each",
                "childof_superset_term_w_each",
                "childof_self_superset_term_w_each",
                "isa_superset_shortcut",
                "isa_superset_shortcut_w_self",
                "childof_superset_shortcut",
                "childof_superset_shortcut_w_self",
                "isa_superset_max_depth_1",
                "isa_superset_max_depth_2",
                "isa_superset_min_depth_2",
                "isa_superset_min_depth_2_max_depth_3",
                "relation",
                "relation_w_object_wildcard",
                "relation_w_predicate_wildcard",
                "add_pair_w_rel_type",
                "template_term",
                "explicit_subject_w_id",
                "explicit_subject_w_type",
                "explicit_object_w_id",
                "explicit_object_w_type",
                "explicit_term",
                "explicit_term_w_type",
                "explicit_term_w_pair_type",
                "explicit_term_w_id",
                "explicit_term_w_pair_id",
                "1_term_to_empty",
                "2_subsequent_args",
                "filter_as_arg",
                "filter_as_move_arg",
                "filter_as_return",
                "filter_copy",
                "world_each_filter_1_component",
                "world_each_filter_2_components",
                "world_each_filter_1_component_no_entity",
                "world_each_filter_2_components_no_entity",
                "10_terms",
                "20_terms",
                "term_after_arg",
                "name_arg",
                "const_in_term",
                "const_optional",
                "create_w_no_template_args",
                "2_terms_w_expr",
                "assert_on_multiple_expr_calls",
                "assert_on_uninitialized_term"
            ]
        }, {
            "id": "RuleBuilder",
            "testcases": [
                "1_type",
                "2_types",
                "id_term",
                "type_term",
                "id_pair_term",
                "id_pair_wildcard_term",
                "type_pair_term",
                "pair_term_w_var",
                "2_pair_terms_w_var",
                "set_var",
                "set_2_vars",
                "set_var_by_name",
                "set_2_vars_by_name",
                "expr_w_var"
            ]
        }, {
            "id": "SystemBuilder",
            "testcases": [
                "builder_assign_same_type",
                "builder_build_to_auto",
                "builder_build_n_statements",
                "1_type",
                "add_1_type",
                "add_2_types",
                "add_1_type_w_1_type",
                "add_2_types_w_1_type",
                "add_pair",
                "add_not",
                "add_or",
                "add_optional",
                "ptr_type",
                "const_type",
                "string_term",
                "singleton_term",
                "10_terms",
                "20_terms",
                "name_arg",
                "create_w_no_template_args",
                "write_annotation"
            ]  
        }, {
            "id": "Trigger",
            "testcases": [
                "on_add",
                "on_remove",
                "on_add_tag_action",
                "on_add_tag_iter",
                "on_add_tag_each",
                "trigger_w_self",
                "on_add_id",
                "on_add_id_arg",
                "on_add_expr",
                "create_w_no_template_args",
                "yield_existing",
                "default_ctor",
                "entity_ctor"
            ]
        }, {
            "id": "Observer",
            "testcases": [
                "2_terms_on_add",
                "2_terms_on_remove",
                "2_terms_on_set",
                "2_terms_un_set",
                "observer_w_self",
                "10_terms",
                "20_terms",
                "2_entities_iter",
                "2_entities_table_column",
                "2_entities_each",
                "create_w_no_template_args",
                "yield_existing",
                "yield_existing_2_terms",
                "default_ctor",
                "entity_ctor"
            ]
        }, {
            "id": "Filter",
            "testcases": [
                "term_each_component",
                "term_each_tag",
                "term_each_id",
                "term_each_pair_type",
                "term_each_pair_id",
                "term_each_pair_relation_wildcard",
                "term_each_pair_object_wildcard",
                "default_ctor_no_assign"
            ]
        }, {
            "id": "ComponentLifecycle",
            "testcases": [
                "ctor_on_add",
                "dtor_on_remove",
                "move_on_add",
                "move_on_remove",
                "copy_on_set",
                "copy_on_override",
                "non_pod_add",
                "non_pod_remove",
                "non_pod_set",
                "non_pod_override",
                "get_mut_new",
                "get_mut_existing",
                "implicit_component",
                "implicit_after_query",
                "deleted_copy",
                "no_default_ctor_emplace",
                "default_init",
                "no_default_ctor_add",
                "no_default_ctor_add_relation",
                "no_default_ctor_add_w_object",
                "no_default_ctor_set",
                "no_copy_ctor",
                "no_move_ctor",
                "no_copy_assign",
                "no_move_assign",
                "no_copy",
                "no_move",
                "no_dtor",
                "default_ctor_w_value_ctor",
                "no_default_ctor_move_ctor_on_set",
                "emplace_w_ctor",
                "emplace_no_default_ctor",
                "emplace_existing",
                "emplace_singleton",
                "dtor_w_non_trivial_implicit_move",
                "dtor_w_non_trivial_explicit_move",
                "grow_no_default_ctor",
                "grow_no_default_ctor_move",
                "grow_no_default_ctor_move_w_component",
                "delete_no_default_ctor"
            ]
        }, {
            "id": "Refs",
            "testcases": [
                "get_ref_by_ptr",
                "get_ref_by_method",
                "ref_after_add",
                "ref_after_remove",
                "ref_after_set",
                "ref_before_set",
                "non_const_ref"
            ]
        }, {
            "id": "Module",
            "testcases": [
                "import",
                "lookup_from_scope",
                "nested_module",
                "nested_type_module",
                "component_redefinition_outside_module",
                "module_tag_on_namespace",
                "dtor_on_fini"
            ]
        }, {
            "id": "ImplicitComponents",
            "testcases": [
                "add",
                "remove",
                "has",
                "set",
                "get",
                "add_pair",
                "remove_pair",
                "module",
                "system",
                "system_optional",
                "system_const",
                "query",
                "implicit_name",
                "reinit",
                "reinit_scoped",
                "reinit_w_lifecycle",
                "first_use_in_system",
                "first_use_tag_in_system",
                "use_const",
                "use_const_w_stage",
                "use_const_w_threads",
                "implicit_base",
                "implicit_const",
                "implicit_ref",
                "implicit_ptr",
                "implicit_const_ref"
            ]
        }, {
            "id": "Snapshot",
            "testcases": [
                "simple_snapshot"
            ]
        }, {
            "id": "WorldFactory",
            "testcases": [
                "entity",
                "entity_w_name",
                "entity_w_id",
                "prefab",
                "prefab_w_name",
                "type",
                "type_w_name",
                "system",
                "system_w_name",
                "system_w_expr",
                "query",
                "query_w_expr",
                "snapshot",
                "module"
            ]
        }, {
            "id": "World",
            "testcases": [
                "builtin_components",
                "multi_world_empty",
                "multi_world_component",
                "multi_world_component_namespace",
                "multi_world_module",
                "multi_world_recycled_component",
                "multi_world_recycled_component_different_generation",
                "type_id",
                "different_comp_same_name",
                "reregister_after_reset",
                "reregister_after_reset_w_namespace",
                "reregister_namespace",
                "implicit_reregister_after_reset",
                "reregister_after_reset_different_name",
                "register_short_template",
                "reimport",
                "reimport_module_after_reset",
                "reimport_module_new_world",
                "reimport_namespaced_module",
                "c_interop_module",
                "c_interop_after_reset",
                "implicit_register_w_new_world",
                "implicit_register_after_reset_register_w_custom_name",
                "register_after_reset_register_w_custom_name",
                "register_builtin_after_reset",
                "register_meta_after_reset",
                "count",
                "count_id",
                "count_pair",
                "count_pair_type_id",
                "count_pair_id",
                "staged_count",
                "async_stage_add",
                "with_tag",
                "with_tag_type",
                "with_relation",
                "with_relation_type",
                "with_relation_object_type",
                "with_tag_nested",
                "with_scope",
                "with_scope_nested",
                "with_scope_type",
                "with_scope_type_staged",
                "with_scope_no_lambda",
                "with_scope_type_no_lambda",
                "recursive_lookup",
                "type_w_tag_name",
                "entity_w_tag_name",
                "template_component_name",
                "template_component_w_namespace_name",
                "template_component_w_same_namespace_name",
                "template_component_w_namespace_name_and_namespaced_arg",
                "template_component_w_same_namespace_name_and_namespaced_arg",
                "entity_as_tag",
                "entity_w_name_as_tag",
                "entity_as_component",
                "entity_w_name_as_component",
                "entity_as_component_2_worlds",
                "entity_as_namespaced_component_2_worlds",
                "entity_as_component_2_worlds_implicit_namespaced",
                "type_as_component",
                "type_w_name_as_component",
                "delete_with_id",
                "delete_with_type",
                "delete_with_pair",
                "delete_with_pair_type",
                "remove_all_id",
                "remove_all_type",
                "remove_all_pair",
                "remove_all_pair_type",
                "get_scope",
                "get_scope_type",
                "register_namespace_after_component",
                "is_alive",
                "is_valid",
                "exists",
                "get_alive",
                "ensure",
                "reset_all",
                "get_tick",
                "register_from_scope",
                "register_nested_from_scope",
                "register_w_root_name",
                "register_nested_w_root_name",
                "set_lookup_path",
                "run_post_frame"
            ]
        }, {
            "id": "Singleton",
            "testcases": [
                "set_get_singleton",
                "get_mut_singleton",
                "emplace_singleton",
                "modified_singleton",
                "add_singleton",
                "remove_singleton",
                "has_singleton",
                "singleton_system",
                "get_singleton",
                "type_id_from_world",
                "set_lambda",
                "get_lambda"
            ]
        }, {
            "id": "Misc",
            "setup": true,
            "testcases": [
                "string_compare_w_char_ptr",
                "string_compare_w_char_ptr_length_diff",
                "string_compare_w_string",
                "string_view_compare_w_char_ptr",
                "string_view_compare_w_string",
                "string_compare_nullptr",
                "nullptr_string_compare",
                "nullptr_string_compare_nullptr",
                "c_macros",
                "app_run",
                "app_run_target_fps"
            ]
        }, {
            "id": "Meta",
            "testcases": [
                "struct",
                "nested_struct",
                "struct_w_portable_type",
                "partial_struct",
                "partial_struct_custom_offset",
                "units",
                "unit_w_quantity",
                "unit_w_prefix",
                "unit_w_over"
            ]
        }, {
            "id": "TableLock",
            "testcases": [
                "each",
                "each_locked",
                "each_without_entity",
                "each_without_entity_locked",
                "iter",
                "iter_locked",
                "iter_without_components",
                "iter_without_components_locked",
                "multi_get",
                "multi_get_locked",
                "multi_set",
                "multi_set_locked"
            ]
        }]
    }
}
