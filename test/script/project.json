{
    "id": "script",
    "type": "application",
    "value": {
        "author": "Sander Mertens",
        "description": "Test project for flecs script",
        "public": false,
        "use": [
            "flecs"
        ]
    },
    "test": {
        "testsuites": [{
            "id": "Eval",
            "testcases": [
                "null",
                "empty",
                "space",
                "space_newline",
                "two_empty_newlines",
                "three_empty_newlines",
                "newline_trailing_space",
                "newline_trailing_spaces",
                "multiple_trailing_newlines",
                "entity",
                "entity_w_core_name",
                "2_entities",
                "line_comment",
                "line_comment_before_stmt",
                "line_comment_after_stmt",
                "line_comment_between_stmt",
                "multiple_line_comment",
                "multiple_line_comment_w_newlines",
                "line_comment_after_stmt_same_line",
                "line_comment_before_scope_open",
                "line_comment_after_newline_before_scope_open",
                "line_comment_after_newline_before_newline_scope_open",
                "multi_line_comment",
                "multi_line_comment_before_stmt",
                "multi_line_comment_after_stmt",
                "multi_line_comment_between_stmt",
                "multiple_multi_line_comment",
                "multiple_multi_line_comment_w_newlines",
                "multi_line_comment_after_stmt_same_line",
                "multi_line_comment_before_scope_open",
                "multi_line_comment_after_newline_before_scope_open",
                "multi_line_comment_multiple_lines",
                "hierarchy_1_child",
                "hierarchy_2_children",
                "hierarchy_1_child_same_line",
                "hierarchy_2_children_same_line",
                "hierarchy_2_children_same_line_no_trailing_comma",
                "entity_after_hierarchy",
                "newline_before_scope_open",
                "newline_w_whitespace_before_scope_open",
                "2_newline_before_scope_open",
                "2_newline_w_whitespace_before_scope_open",
                "hierarchy_2_levels",
                "hierarchy_2_levels_2_subtrees",
                "create_in_scope",
                "hierarchy_w_pred_subj",
                "hierarchy_custom_relation",
                "hierarchy_custom_relation_2_levels",
                "hierarchy_custom_relation_apply_to_object",
                "hierarchy_custom_relation_apply_to_object_2_levels",
                "entity_after_hierarchy_custom_relation",
                "entity_after_hierarchy_custom_relation_2_levels",
                "with_tag",
                "with_tag_2_entities",
                "with_tag_same_line",
                "with_tag_2_entities_same_line",
                "with_tag_2_entities_same_line_no_trailing_comma",
                "with_tag_2_levels",
                "with_tag_2_levels_2_subtrees",
                "with_n_tags",
                "with_n_tags_2_levels",
                "with_after_scope",
                "with_after_with",
                "scope_inside_with_inside_scope",
                "with_inside_scope",
                "with_tag_core_name",
                "inherit",
                "inherit_newline",
                "inherit_w_colon",
                "inherit_w_colon_w_scope",
                "assign_component_w_value",
                "assign_tag_in_assign_scope",
                "assign_tag_in_assign_scope_same_line",
                "assign_tag_in_assign_scope_core_name",
                "assign_component_value_in_assign_scope",
                "assign_2_component_values_in_assign_scope",
                "type_and_assign_in_plecs",
                "type_and_assign_in_plecs_w_2_members",
                "type_and_assign_in_plecs_w_3_members",
                "type_and_assign_in_plecs_w_enum",
                "type_and_assign_in_plecs_w_enum_using_meta",
                "type_and_assign_in_plecs_w_enum_primitive_using_meta",
                "type_and_assign_in_plecs_w_enum_primitive_and_struct",
                "type_and_assign_in_plecs_nested_member",
                "dot_assign_nested_member",
                "dot_assign_binary_expr",
                "open_scope_no_parent",
                "create_subject_in_root_scope_w_resolvable_id",
                "create_subject_in_scope_w_resolvable_id",
                "create_subject_in_scope_w_resolvable_id_using",
                "using_scope",
                "using_nested_scope",
                "using_nested_in_scope",
                "using_with_scope",
                "using_w_entity_ref_in_value_2_members",
                "using_w_entity_ref_in_value_3_members",
                "script_w_only_using",
                "2_using_scope",
                "2_using_in_different_scope",
                "empty_scope_after_using",
                "scope_after_assign",
                "assign_after_inherit",
                "multiple_tags_single_line",
                "multiple_pairs_single_line",
                "multiple_vars_single_line",
                "multiple_assignments_single_line",
                "2_stmts_in_scope_w_no_parent",
                "assign_tag_to_parent",
                "assign_component_to_parent",
                "assign_to_parent_pair_w_new_entities_in_scope",
                "assign_to_parent_pair_w_existing_entities_in_scope",
                "default_child_component",
                "default_child_component_w_assign",
                "struct_type_w_default_child_component",
                "struct_type_w_default_child_component_nested_member",
                "enum_type_w_default_child_component",
                "default_type_from_with",
                "default_type_from_nested_with",
                "default_type_from_with_in_entity_scope_w_default_type",
                "default_type_from_entity_scope_in_with",
                "scope_w_1_subj_and_2_pairs",
                "inherit_from_multiple",
                "assign_pair_component",
                "assign_pair_component_in_scope",
                "assign_pair_component_in_script",
                "assign_pair_component_in_script_update",
                "set_entity_names",
                "oneof",
                "brief_annotation",
                "name_annotation",
                "link_annotation",
                "color_annotation",
                "multiple_annotations",
                "annotation_w_trailing_space",
                "multiline_string",
                "declaration_w_underscore_name",
                "annotate_declaration",
                "anonymous_entity",
                "anonymous_entity_in_scope",
                "anonymous_declaration",
                "const_var_int",
                "const_var_float",
                "const_var_bool",
                "const_var_string",
                "const_var_struct",
                "const_var_scoped",
                "assign_component_from_var",
                "assign_component_from_var_in_scope",
                "scope_w_component_after_const_var",
                "component_after_const_paren_expr",
                "component_after_const_add_expr",
                "component_after_const_sub_expr",
                "component_after_const_mul_expr",
                "component_after_const_div_expr",
                "parse_with",
                "parse_with_w_with",
                "parse_with_w_tag",
                "parse_with_value",
                "parse_with_2_values",
                "parse_with_2_nested_values",
                "parse_with_var",
                "parse_with_2_vars",
                "parse_with_2_nested_vars",
                "parse_with_var_in_scope",
                "assign_const_w_expr",
                "const_w_type",
                "typed_const_w_composite_type",
                "assign_var_to_typed_const_w_composite_type",
                "using_wildcard",
                "single_line_comment_in_value",
                "single_line_comment_in_value_after_scope",
                "multi_line_comment_in_value",
                "multi_line_comment_in_value_after_scope",
                "module_stmt",
                "nested_module_stmt",
                "module_stmt_w_scope",
                "module_stmt_w_nested_scope",
                "assign_singleton_tag",
                "assign_singleton_component",
                "assign_singleton_tag_w_scope",
                "assign_singleton_2_tags_w_scope",
                "assign_singleton_component_w_scope",
                "assign_singleton_2_components_w_scope",
                "with_pair_in_scope",
                "with_pair_component_in_scope",
                "pair_w_rel_var",
                "pair_w_tgt_var",
                "component_in_with_scope_in_scope",
                "array_component",
                "on_set_w_kind_paren_no_reflection",
                "on_set_w_kind_paren",
                "on_set_w_kind_no_paren_no_reflection",
                "on_set_w_kind_no_paren",
                "on_set_w_single_assign",
                "on_set_w_single_assign_scoped_w_value",
                "on_set_w_single_assign_scoped_no_value",
                "if_true",
                "if_true_no_else",
                "if_false",
                "if_true_var",
                "if_false_var",
                "if_10",
                "if_0",
                "if_true_in_scope",
                "if_false_in_scope",
                "if_lt",
                "if_lt_const",
                "isa_in_module",
                "isa_hierarchy",
                "isa_hierarchy_in_module",
                "custom_isa_hierarchy_in_module",
                "custom_isa_hierarchy_in_subtree",
                "inherit_w_kind",
                "inherit_w_kind_scope",
                "inherit_w_kind_value",
                "inherit_w_kind_value_scope",
                "multiple_inherit_w_kind",
                "multiple_inherit_w_kind_scope",
                "auto_override_tag",
                "auto_override_component",
                "auto_override_pair",
                "auto_override_pair_component",
                "lowercase_prefab_kind",
                "assign_component_to_const",
                "assign_component_member_to_const",
                "prefab_w_slot",
                "prefab_w_slot_variant",
                "const_w_component_expr",
                "const_w_component_expr_in_scope",
                "const_w_component_expr_in_module",
                "const_w_component_in_scope_expr_in_scope",
                "const_w_component_in_scope_expr_in_module",
                "const_w_component_and_entity_in_scope_expr_in_scope",
                "const_w_component_and_entity_in_scope_expr_in_module",
                "path_tag_in_scope",
                "path_tag_in_module",
                "path_tag_in_nested_scope",
                "path_tag_in_nested_module",
                "dont_inherit_script_pair",
                "update_script_w_anonymous",
                "update_script_w_anonymous_paren",
                "clear_script",
                "clear_script_w_anonymous",
                "clear_script_w_anonymous_paren",
                "partial_assign",
                "partial_assign_nontrivial",
                "partial_assign_with",
                "partial_assign_nontrivial_with",
                "partial_assign_with_large_array",
                "non_trivial_var_component",
                "non_trivial_var_with"
            ]
        }, {
            "id": "Template",
            "testcases": [
                "template_no_scope",
                "template_no_props",
                "template_prop",
                "template_prop_space_colon",
                "template_2_props",
                "template_w_using",
                "template_instance_w_default_values",
                "template_instance_w_assign_default_values",
                "template_instance_w_overridden_values",
                "template_w_child",
                "template_w_child_parse_script",
                "template_w_child_parse_script_twice",
                "template_w_child_update_after_parse",
                "template_w_nested_child",
                "template_w_prefab",
                "template_w_prefab_tree",
                "template_w_nested_template",
                "instantiate_prefab_w_template",
                "template_w_prefab_w_template",
                "3_templates",
                "template_nested_w_default_var",
                "template_w_anonymous",
                "template_w_anonymous_parse_again",
                "template_w_composite_prop",
                "template_with_with",
                "module_w_template",
                "module_w_nested_template",
                "template_w_pair_w_this_var",
                "prop_without_using_meta",
                "hoist_var",
                "anonymous_template_instance",
                "anonymous_template_instance_no_scope",
                "anonymous_template_instance_w_prop",
                "anonymous_template_instance_w_prop_no_scope"
            ]
        }, {
            "id": "Error",
            "testcases": [
                "multi_line_comment_after_newline_before_newline_scope_open",
                "missing_end_of_scope",
                "with_n_tags_2_levels_invalid_tag",
                "assignment_to_non_component",
                "struct_w_member_w_assignment_to_nothing",
                "struct_w_member_w_assignment_to_empty_scope",
                "invalid_nested_assignment",
                "invalid_partial_pair_assignment",
                "empty_assignment",
                "empty_assignment_before_end_of_scope",
                "default_type_with_tag",
                "invalid_oneof",
                "default_type_with_tag",
                "unterminated_multiline_string",
                "const_var_redeclare",
                "typed_const_w_composite_type_invalid_assignment",
                "unterminated_multi_line_comment_in_value",
                "pair_w_rel_var_invalid_type",
                "pair_w_tgt_var_invalid_type",
                "with_value_not_a_component",
                "component_in_with_scope",
                "component_in_with_scope_nested",
                "assign_after_with_in_scope",
                "not_an_array_component",
                "array_component_w_curly_brackets",
                "unknown_identifier",
                "unknown_identifier_for_int_field",
                "prefab_w_slot_no_parent",
                "tag_not_found",
                "component_not_found",
                "pair_first_not_found",
                "pair_second_not_found",
                "kind_not_found",
                "base_not_found",
                "entity_w_anonymous_tag",
                "member_expr_without_value_end_of_scope",
                "member_expr_without_value_comma",
                "member_expr_without_value_newline",
                "2_member_expr_without_value",
                "expr_junk_after_number",
                "expr_junk_after_unary_minus",
                "expr_comma_after_nothing",
                "expr_digit_with_two_dots",
                "template_empty",
                "template_unresolved_tag",
                "template_unresolved_component",
                "template_unresolved_pair_relationship",
                "template_unresolved_pair_target",
                "template_unresolved_with_tag",
                "template_unresolved_with_component",
                "template_unresolved_with_pair_relationship",
                "template_unresolved_with_pair_target",
                "template_unresolved_tag_in_child",
                "template_prop_no_type",
                "template_prop_no_default",
                "template_w_composite_prop_invalid_assignment",
                "template_redeclare_prop_as_const",
                "template_redeclare_prop_as_prop",
                "template_redeclare_const_as_const",
                "run_template_after_error",
                "update_template_after_error",
                "template_in_template"
            ]
        }, {
            "id": "Expr",
            "testcases": [
                "add_2_int_literals",
                "add_2_int_literals_twice",
                "sub_2_int_literals",
                "mul_2_int_literals",
                "div_2_int_literals",
                "add_3_int_literals",
                "add_3_int_literals_twice",
                "sub_3_int_literals",
                "mul_3_int_literals",
                "div_3_int_literals",
                "int_to_bool",
                "bool_to_int",
                "bool_to_uint",
                "add_mul_3_int_literals",
                "sub_mul_3_int_literals",
                "div_mul_3_int_literals",
                "add_div_3_int_literals",
                "sub_div_3_int_literals",
                "mul_div_3_int_literals",
                "mul_add_mul_add_int_literals",
                "mul_sub_mul_sub_int_literals",
                "mul_div_mul_div_int_literals",
                "div_add_div_add_int_literals",
                "div_sub_div_sub_int_literals",
                "div_sub_div_mul_int_literals",
                "div_mul_div_mul_int_literals",
                "add_2_flt_literals",
                "sub_2_flt_literals",
                "mul_2_flt_literals",
                "div_2_flt_literals",
                "add_2_int_neg_literals",
                "sub_2_int_neg_literals",
                "mul_2_int_neg_literals",
                "div_2_int_neg_literals",
                "mul_lparen_add_add_rparen_int_literals",
                "mul_lparen_add_add_add_rparen_int_literals",
                "mul_lparen_add_add_rparen_add_int_literals",
                "lparen_add_add_rparen_mul_int_literals",
                "lparen_add_add_add_rparen_mul_int_literals",
                "double_paren_add_add",
                "double_paren_literal",
                "lparen_add_add_rparen_mul_lparen_add_add_rparen",
                "float_result_add_2_int_literals",
                "struct_result_add_2_int_literals",
                "struct_result_add_2_2_fields_int_literals",
                "struct_result_add_3_int_literals",
                "struct_result_lparen_int_rparen",
                "add_to_var",
                "add_var_to",
                "var_member",
                "bool_cond_and_bool",
                "bool_cond_or_bool",
                "int_cond_and_int",
                "int_cond_or_int",
                "bool_cond_and_int",
                "int_cond_and_bool",
                "bool_cond_or_int",
                "int_cond_or_bool",
                "cond_eq_bool",
                "cond_eq_int",
                "cond_neq_bool",
                "cond_neq_int",
                "cond_eq_bool_int",
                "cond_eq_int_flt",
                "cond_eq_cond_and",
                "cond_eq_cond_or",
                "cond_gt_bool",
                "cond_gt_int",
                "cond_gt_flt",
                "cond_gteq_bool",
                "cond_gteq_int",
                "cond_gteq_flt",
                "cond_lt_bool",
                "cond_lt_int",
                "cond_lt_flt",
                "cond_lteq_bool",
                "cond_lteq_int",
                "cond_lteq_flt",
                "min_lparen_int_rparen",
                "min_lparen_int_add_int_rparen",
                "min_var",
                "min_lparen_int_rparen_to_i64",
                "min_lparen_int_rparen_to_i32",
                "struct_w_min_var",
                "struct_w_min_lparen_int_rparen",
                "struct_w_min_lparen_var_rparen",
                "shift_left_int",
                "shift_right_int",
                "shift_left_int_add_int",
                "shift_left_int_mul_int",
                "add_int_shift_left_int",
                "mul_int_shift_left_int",
                "add_int_shift_left_int_add_int",
                "mul_int_shift_left_int_mul_int",
                "entity_expr",
                "entity_path_expr",
                "entity_parent_func",
                "entity_name_func",
                "entity_doc_name_func",
                "entity_chain_func",
                "var_parent_func",
                "var_name_func",
                "var_doc_name_func",
                "var_chain_func",
                "interpolate_string_w_i32_var",
                "interpolate_string_w_string_var",
                "interpolate_string_w_entity_var",
                "interpolate_string_w_id_var",
                "interpolate_string_w_var_not_found",
                "interpolate_string_w_entity_var_0",
                "interpolate_string_w_var_special_chars",
                "interpolate_string_w_var_before_after_text",
                "interpolate_string_w_curly_brackets_var",
                "interpolate_string_w_curly_brackets_expr",
                "interpolate_string_w_curly_brackets_expr_w_var",
                "interpolate_string_w_curly_brackets_expr_w_composite_var",
                "interpolate_string_w_escape_var_operator",
                "interpolate_string_w_escape_curly_brackets",
                "interpolate_string_w_func",
                "interpolate_string_w_func_chain",
                "iter_to_vars_no_data",
                "iter_to_vars_1_comp",
                "iter_to_vars_2_comps",
                "iter_to_vars_1_comp_1_tag",
                "iter_to_vars_w_1_query_var",
                "iter_to_vars_w_2_query_vars",
                "component_expr",
                "component_member_expr"
            ]
        }, {
            "id": "Vars",
            "testcases": [
                "declare_1_var",
                "declare_2_vars",
                "declare_vars_nested_scope",
                "declare_vars_2_scopes",
                "redeclare_var",
                "i32_expr_w_i32_var",
                "i32_expr_w_f32_var",
                "i32_expr_w_string_var",
                "string_expr_w_string_var",
                "struct_expr_w_i32_vars",
                "struct_expr_w_struct_var",
                "nested_struct_expr_w_struct_var",
                "redeclare_in_scope",
                "init_fini_vars"
            ]
        }, {
            "id": "Serialize",
            "testcases": [
                "bool",
                "byte",
                "char",
                "i8",
                "i16",
                "i32",
                "i64",
                "iptr",
                "u8",
                "u16",
                "u32",
                "u64",
                "uptr",
                "float",
                "double",
                "string",
                "entity",
                "entity_10k",
                "id",
                "enum",
                "bitmask",
                "float_nan",
                "float_inf",
                "double_nan",
                "double_inf",
                "struct_enum",
                "struct_bitmask",
                "struct_i32",
                "struct_i32_i32",
                "struct_entity",
                "struct_id",
                "array_i32_3",
                "array_struct_i32_i32",
                "array_array_i32_3",
                "vector_i32_3",
                "vector_struct_i32_i32",
                "vector_array_i32_3",
                "entity_entity_after_float",
                "struct_nested_i32",
                "struct_nested_i32_i32",
                "struct_2_nested_i32_i32",
                "struct_i32_array_3",
                "struct_struct_i32_array_3",
                "struct_struct_i32_i32_array_3",
                "struct_w_array_type_i32_i32",
                "struct_w_array_type_struct",
                "struct_w_2_array_type_i32_i32",
                "struct_w_2_array_type_struct",
                "struct_partial",
                "escape_simple_string",
                "escape_newline",
                "escape_2_newlines",
                "escape_string_w_trailing_newline",
                "escape_string_w_2_trailing_newlines",
                "escape_string_w_delim"
            ]
        }, {
            "id": "Deserialize",
            "testcases": [
                "bool",
                "byte",
                "char",
                "char_literal",
                "i8",
                "i16",
                "i32",
                "i64",
                "iptr",
                "u8",
                "u16",
                "u32",
                "u64",
                "uptr",
                "float",
                "double",
                "negative_int",
                "negative_float",
                "invalid_i8",
                "invalid_i16",
                "invalid_i32",
                "invalid_i64",
                "invalid_iptr",
                "invalid_u8",
                "invalid_u16",
                "invalid_u32",
                "invalid_u64",
                "invalid_uptr",
                "invalid_float",
                "invalid_double",
                "string",
                "entity",
                "id",
                "enum",
                "bitmask",
                "struct_enum",
                "struct_bitmask",
                "struct_i32",
                "struct_i32_neg",
                "struct_i32_i32",
                "struct_entity",
                "struct_id",
                "struct_nested_i32",
                "struct_nested_i32_i32",
                "struct_2_nested_i32_i32",
                "struct_member_i32",
                "struct_member_i32_neg",
                "struct_member_i32_i32",
                "struct_member_nested_i32",
                "struct_member_nested_i32_i32",
                "struct_member_2_nested_i32_i32",
                "struct_member_2_nested_i32_i32_reverse",
                "struct_i32_array_3",
                "struct_struct_i32_array_3",
                "struct_struct_i32_i32_array_3",
                "struct_w_array_type_i32_i32",
                "struct_w_array_type_struct",
                "struct_w_2_array_type_i32_i32",
                "struct_w_2_array_type_struct",
                "discover_type_int",
                "discover_type_negative_int",
                "discover_type_float",
                "discover_type_negative_float",
                "discover_type_string",
                "discover_type_multiline_string",
                "discover_type_entity",
                "discover_type_bool",
                "discover_type_unknown",
                "discover_type_invalid",
                "opaque_struct",
                "opaque_struct_w_member",
                "opaque_struct_w_member_reverse",
                "struct_w_opaque_member"
            ]
        }]
    }
}
