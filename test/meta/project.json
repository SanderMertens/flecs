{
    "id": "meta",
    "type": "application",
    "value": {
        "author": "Sander Mertens",
        "description": "Test project for flecs.meta",
        "public": false,
        "coverage": false,
        "use": [
            "flecs"
        ]
    },
    "test": {
        "testsuites": [{
            "id": "PrimitiveTypes",
            "testcases": [
                "bool",
                "byte",
                "char",
                "i8",
                "i16",
                "i32",
                "i64",
                "iptr",
                "u8",
                "u16",
                "u32",
                "u64",
                "uptr",
                "float",
                "double",
                "string",
                "entity",
                "id",
                "builtin_bool",
                "builtin_byte",
                "builtin_char",
                "builtin_i8",
                "builtin_i16",
                "builtin_i32",
                "builtin_i64",
                "builtin_iptr",
                "builtin_u8",
                "builtin_u16",
                "builtin_u32",
                "builtin_u64",
                "builtin_uptr",
                "builtin_float",
                "builtin_double",
                "builtin_string",
                "builtin_entity",
                "builtin_id",
                "struct_w_bool",
                "struct_w_byte",
                "struct_w_char",
                "struct_w_i8",
                "struct_w_i16",
                "struct_w_i32",
                "struct_w_i64",
                "struct_w_iptr",
                "struct_w_u8",
                "struct_w_u16",
                "struct_w_u32",
                "struct_w_u64",
                "struct_w_uptr",
                "struct_w_float",
                "struct_w_double",
                "struct_w_string",
                "struct_w_entity",
                "struct_w_id",
                "primitive_init",
                "primitive_w_short_notation"
            ]
        }, {
            "id": "EnumTypes",
            "testcases": [
                "enum_1_constant",
                "enum_2_constants",
                "enum_3_constants",
                "enum_3_constants_manual_values",
                "struct_w_enum",
                "zero_initialized",
                "enum_relation",
                "enum_w_short_notation"
            ]
        }, {
            "id": "BitmaskTypes",
            "testcases": [
                "bitmask_1_constant",
                "bitmask_2_constants",
                "bitmask_3_constants",
                "bitmask_4_constants",
                "bitmask_4_constants_manual_values",
                "struct_w_bitmask",
                "bitmask_w_short_notation"
            ]
        }, {
            "id": "StructTypes",
            "testcases": [
                "i32",
                "i32_i32",
                "i32_i32_i32",
                "bool_i32",
                "bool_bool_i32",
                "bool_i32_bool_i32",
                "i32_bool",
                "i32_bool_bool",
                "i32_bool_bool_bool",
                "i32_i64",
                "i32_i64_i32",
                "incomplete_member",
                "partial_type",
                "partial_type_custom_offset",
                "struct_w_short_notation",
                "value_range",
                "error_range",
                "warning_range",
                "error_and_warning_range",
                "error_range_invalid_type",
                "warning_range_invalid_type",
                "invalid_value_range",
                "invalid_error_range",
                "invalid_warning_range",
                "overlapping_error_warning_range",
                "overlapping_value_error_range",
                "overlapping_value_warning_range",
                "struct_w_16_alignment"
            ]
        }, {
            "id": "NestedStructTypes",
            "testcases": [
                "1_bool",
                "1_int32",
                "1_bool_w_bool_member",
                "1_bool_w_int32_member",
                "1_int32_w_bool_member",
                "1_int32_w_int32_member",
                "1_bool_2_same",
                "1_bool_2_bool",
                "1_bool_2_i32",
                "1_i32_2_bool",
                "1_bool_2_bool_bool",
                "1_bool_bool_2_bool",
                "1_bool_bool_2_same",
                "1_bool_bool_2_bool_bool",
                "1_i32_2_same",
                "1_i32_2_i32",
                "1_i32_2_i32_i32",
                "1_i32_i32_2_i32",
                "1_i32_i32_2_same",
                "1_i32_i32_2_i32_i32",
                "2_lvls_bool",
                "2_lvls_bool_bool"
            ]
        }, {
            "id": "ArrayTypes",
            "testcases": [
                "array_bool_1",
                "array_bool_2",
                "array_bool_3",
                "array_bool_1_before_i32_member",
                "array_bool_2_before_i32_member",
                "array_bool_3_before_i32_member",
                "array_i32_3",
                "array_i32_3_before_i32_member",
                "array_struct_bool_3",
                "array_struct_bool_3_before_i32_member",
                "array_struct_array_bool_3",
                "2_arrays_1_bool_1_i32",
                "2_arrays_1_i32_1_bool",
                "2_arrays_1_i32_1_bool",
                "8_arrays_bool_w_padded_member",
                "standaline_array_bool_1",
                "standaline_array_bool_2",
                "standaline_array_bool_3",
                "array_of_standaline_array_bool_1",
                "array_of_standaline_array_bool_2",
                "array_of_standaline_array_bool_3",
                "array_w_short_notation"
            ]
        }, {
            "id": "VectorTypes",
            "testcases": [
                "vector_bool",
                "vector_i32",
                "vector_struct",
                "vector_w_short_notation"
            ]
        },  {
            "id": "Units",
            "testcases": [
                "member_w_unit",
                "member_w_unit_type",
                "cursor_get_unit",
                "cursor_get_unit_type",
                "unit_w_quantity",
                "unit_w_self_quantity",
                "unit_w_self_quantity_after_init",
                "unit_w_derived",
                "unit_w_over",
                "unit_w_prefix",
                "member_w_invalid_unit",
                "unit_w_invalid_quantity",
                "unit_w_invalid_derived",
                "unit_w_invalid_symbol_w_over",
                "unit_w_invalid_symbol_w_prefix",
                "unit_w_invalid_over",
                "unit_w_over_no_derived",
                "define_twice",
                "define_twice_different_quantity",
                "define_twice_remove_quantity",
                "set_unit",
                "set_unit_w_derived",
                "set_unit_w_over",
                "set_unit_w_prefix",
                "builtin_units",
                "unit_w_short_notation",
                "unit_prefix_w_short_notation",
                "quantity_w_short_notation"
            ]
        }, {
            "id": "Serialized",
            "testcases": [
                "primitive_constants",
                "ops_bool",
                "ops_byte",
                "ops_char",
                "ops_i8",
                "ops_i16",
                "ops_i32",
                "ops_i64",
                "ops_iptr",
                "ops_u8",
                "ops_u16",
                "ops_u32",
                "ops_u64",
                "ops_uptr",
                "ops_float",
                "ops_double",
                "ops_string",
                "ops_entity",
                "ops_id",
                "ops_struct_bool",
                "ops_struct_bool_bool",
                "ops_struct_i32",
                "ops_struct_i32_i32",
                "ops_struct_i32_bool",
                "ops_struct_bool_i32",
                "ops_nested_struct_1_bool",
                "ops_nested_struct_1_i32",
                "ops_nested_struct_1_bool_w_bool_member",
                "ops_nested_struct_1_bool_w_i32_member",
                "ops_nested_struct_1_bool_2_bool",
                "ops_nested_struct_1_i32_2_bool",
                "ops_nested_struct_1_i32_i32_2_bool_bool",
                "ops_nested_struct_1_bool_bool_2_i32_i32",
                "ops_nested_struct_1_i32_bool_2_bool_i32",
                "ops_nested_struct_1_bool_i32_2_i32_bool",
                "ops_nested_2_lvls_bool",
                "ops_nested_2_lvls_bool_bool",
                "ops_nested_2_lvls_i32_i32_w_member_before",
                "ops_nested_2_lvls_1_bool_i32_2_i32_bool_w_member_before",
                "ops_nested_2_lvls_1_i32_bool_2_bool_i32_w_member_before",
                "ops_struct_array_bool_1",
                "ops_struct_array_bool_2",
                "ops_struct_array_bool_3",
                "ops_struct_array_bool_1_w_i32_after",
                "ops_struct_array_bool_2_w_i32_after",
                "ops_struct_array_bool_3_w_i32_after",
                "ops_struct_array_struct_bool_3_w_i32_after",
                "ops_standalone_array_bool_1",
                "ops_standalone_array_bool_2",
                "ops_standalone_array_bool_3",
                "ops_standalone_array_bool_1_w_bool_after",
                "ops_standalone_array_bool_2_w_bool_after",
                "ops_standalone_array_bool_3_w_bool_after",
                "ops_vector",
                "ops_struct_w_vector",
                "ops_struct_w_vector_w_bool_before",
                "ops_struct_w_vector_w_bool_after",
                "ops_bitmask",
                "ops_struct_w_bitmask",
                "ops_enum",
                "ops_struct_w_enum"
            ]
        }, {
            "id": "Cursor",
            "testcases": [
                "set_bool",
                "set_byte",
                "set_char",
                "set_i8",
                "set_i16",
                "set_i32",
                "set_i64",
                "set_iptr",
                "set_u8",
                "set_u16",
                "set_u32",
                "set_u64",
                "set_uptr",
                "set_float",
                "set_double",
                "set_string",
                "set_string_literal",
                "set_string_to_null",
                "set_entity",
                "set_entity_to_number",
                "set_entity_to_0",
                "set_id",
                "set_id_to_number",
                "set_id_to_0",
                "set_enum",
                "set_bitmask",
                "set_signed_as_unsigned",
                "set_unsigned_as_signed",
                "set_signed_as_unsigned_out_of_range",
                "set_unsigned_as_signed_out_of_range",
                "set_string_to_null_as_signed",
                "set_string_to_null_as_unsigned",
                "set_entity_as_signed",
                "set_entity_as_unsigned",
                "set_entity_as_signed_out_of_range",
                "set_id_as_signed",
                "set_id_as_unsigned",
                "set_id_as_signed_out_of_range",
                "set_str_to_bool",
                "set_str_to_char",
                "set_str_literal_to_char",
                "set_str_to_i8",
                "set_str_to_i16",
                "set_str_to_i32",
                "set_str_to_i64",
                "set_str_to_u64",
                "set_str_to_f32",
                "set_str_to_f64",
                "set_str_to_entity",
                "set_str_to_id",
                "set_str_to_invalid_bool",
                "set_str_to_invalid_entity",
                "set_str_to_invalid_id",
                "struct_set_i32",
                "struct_set_i32_i32",
                "struct_set_i32_i32_i32",
                "struct_set_bool",
                "struct_set_bool_bool",
                "struct_set_bool_bool_bool",
                "struct_set_bool_bool_i32_bool",
                "struct_nested_i32",
                "struct_2_nested_1_i32_2_i32",
                "struct_2_nested_1_i32_i32_2_i32_i32",
                "struct_2_nested_1_i32_i32_2_i32_i32_w_padding_members",
                "struct_set_array_i32_3",
                "struct_set_2_array_i32_3",
                "struct_set_2_array_i32_3_w_padding_members",
                "struct_set_array_w_struct_i32",
                "struct_set_2_array_w_struct_i32",
                "struct_set_array_w_struct_w_array_i32",
                "struct_set_2_array_w_struct_w_array_i32",
                "struct_member_i32",
                "struct_member_i32_i32",
                "struct_member_i32_i32_reverse",
                "struct_member_nested_i32_i32",
                "struct_member_2_nested_i32_i32",
                "struct_member_2_nested_i32_i32_reverse",
                "struct_dotmember",
                "struct_dotmember_assign_twice",
                "struct_member_after_dotmember",
                "struct_next_after_dotmember",
                "struct_pop_after_dotmember",
                "struct_w_array_type_i32_i32",
                "struct_w_array_type_struct",
                "struct_w_2_array_type_i32_i32",
                "struct_w_2_array_type_struct",
                "array_i32_3",
                "array_struct_3",
                "array_move_primitive",
                "array_move_struct",
                "array_move_out_of_range",
                "opaque_set_bool",
                "opaque_set_char",
                "opaque_set_int",
                "opaque_set_uint",
                "opaque_set_float",
                "opaque_set_string",
                "opaque_set_entity",
                "opaque_set_id",
                "opaque_set_int_vec",
                "opaque_set_int_vec_empty",
                "opaque_set_int_vec_resize_smaller",
                "opaque_set_int_vec_resize_larger",
                "opaque_set_int_vec_resize_empty",
                "opaque_set_opaque_int_vec",
                "opaque_set_struct",
                "opaque_set_nested_struct",
                "opaque_set_nested_opaque_struct",
                "opaque_set_array",
                "opaque_set_array_2_of_3_elems",
                "opaque_set_array_empty",
                "opaque_set_int_to_uint",
                "opaque_set_uint_to_int",
                "opaque_set_float_to_int",
                "opaque_set_float_to_uint",
                "opaque_set_int_to_float",
                "opaque_set_uint_to_float",
                "opaque_set_int_to_uint",
                "opaque_set_uint_to_int",
                "opaque_set_string_to_char",
                "opaque_set_int_to_char",
                "opaque_set_uint_to_char",
                "opaque_set_char_to_int",
                "opaque_set_char_to_uint",
                "struct_w_2_opaque_structs",
                "struct_w_2_opaque_vectors",
                "struct_w_2_opaque_arrays",
                "struct_w_3_opaque_structs",
                "struct_w_3_opaque_vectors",
                "struct_w_3_opaque_arrays",
                "opaque_struct_w_opaque_vec",
                "opaque_vec_w_opaque_elem",
                "next_out_of_bounds",
                "set_out_of_bounds",
                "get_member_id"
            ]
        }, {
            "id": "DeserializeFromExpr",
            "testcases": [
                "bool",
                "byte",
                "char",
                "char_literal",
                "i8",
                "i16",
                "i32",
                "i64",
                "iptr",
                "u8",
                "u16",
                "u32",
                "u64",
                "uptr",
                "float",
                "double",
                "negative_int",
                "negative_float",
                "string",
                "entity",
                "id",
                "enum",
                "bitmask",
                "struct_enum",
                "struct_bitmask",
                "struct_i32",
                "struct_i32_neg",
                "struct_i32_i32",
                "struct_entity",
                "struct_id",
                "struct_nested_i32",
                "struct_nested_i32_i32",
                "struct_2_nested_i32_i32",
                "struct_member_i32",
                "struct_member_i32_neg",
                "struct_member_i32_i32",
                "struct_member_nested_i32",
                "struct_member_nested_i32_i32",
                "struct_member_2_nested_i32_i32",
                "struct_member_2_nested_i32_i32_reverse",
                "struct_i32_array_3",
                "struct_struct_i32_array_3",
                "struct_struct_i32_i32_array_3",
                "struct_w_array_type_i32_i32",
                "struct_w_array_type_struct",
                "struct_w_2_array_type_i32_i32",
                "struct_w_2_array_type_struct",
                "discover_type_int",
                "discover_type_negative_int",
                "discover_type_float",
                "discover_type_negative_float",
                "discover_type_string",
                "discover_type_multiline_string",
                "discover_type_entity",
                "discover_type_bool",
                "discover_type_unknown",
                "discover_type_invalid"
            ]
        }, {
            "id": "SerializeToExpr",
            "testcases": [
                "bool",
                "byte",
                "char",
                "i8",
                "i16",
                "i32",
                "i64",
                "iptr",
                "u8",
                "u16",
                "u32",
                "u64",
                "uptr",
                "float",
                "double",
                "string",
                "entity",
                "id",
                "enum",
                "bitmask",
                "float_nan",
                "float_inf",
                "double_nan",
                "double_inf",
                "struct_enum",
                "struct_bitmask",
                "struct_i32",
                "struct_i32_i32",
                "struct_entity",
                "struct_id",
                "array_i32_3",
                "array_struct_i32_i32",
                "array_array_i32_3",
                "vector_i32_3",
                "vector_struct_i32_i32",
                "vector_array_i32_3",
                "entity_entity_after_float",
                "struct_nested_i32",
                "struct_nested_i32_i32",
                "struct_2_nested_i32_i32",
                "struct_i32_array_3",
                "struct_struct_i32_array_3",
                "struct_struct_i32_i32_array_3",
                "struct_w_array_type_i32_i32",
                "struct_w_array_type_struct",
                "struct_w_2_array_type_i32_i32",
                "struct_w_2_array_type_struct",
                "struct_partial",
                "escape_simple_string",
                "escape_newline",
                "escape_2_newlines",
                "escape_string_w_trailing_newline",
                "escape_string_w_2_trailing_newlines",
                "escape_string_w_delim"
            ]
        }, {
            "id": "DeserializeFromJson",
            "testcases": [
                "struct_bool",
                "struct_byte",
                "struct_char",
                "struct_char_literal",
                "struct_i8",
                "struct_i16",
                "struct_i32",
                "struct_i64",
                "struct_iptr",
                "struct_u8",
                "struct_u16",
                "struct_u32",
                "struct_u64",
                "struct_uptr",
                "struct_float",
                "struct_double",
                "struct_negative_int",
                "struct_negative_float",
                "struct_string",
                "struct_entity",
                "struct_id",
                "struct_enum",
                "struct_bitmask",
                "struct_i32_i32",
                "struct_nested_i32",
                "struct_nested_i32_i32",
                "struct_2_nested_i32_i32",
                "struct_i32_array_3",
                "struct_struct_i32_array_3",
                "struct_struct_i32_i32_array_3",
                "struct_w_array_type_i32_i32",
                "struct_w_2_array_type_i32_i32",
                "struct_w_nested_member_i32",
                "struct_w_2_nested_members_i32",
                "struct_w_nested_members_struct",
                "struct_w_2_nested_members_struct",
                "deser_entity_1_component_1_member",
                "deser_entity_1_component_1_member_w_spaces",
                "deser_entity_1_component_2_members",
                "deser_entity_2_components",
                "deser_entity_1_component_composite_member",
                "deser_entity_1_component_nested_member",
                "deser_entity_1_pair",
                "deser_entity_2_pairs",
                "deser_entity_empty",
                "deser_entity_w_path",
                "deser_entity_w_path_and_ids",
                "deser_entity_w_path_and_ids_and_values",
                "deser_entity_w_ids",
                "ser_deser_mini",
                "ser_deser_init",
                "ser_deser_mini_serialize_builtin",
                "ser_deser_mini_serialize_modules",
                "ser_deser_mini_serialize_builtin_modules",
                "ser_deser_init_serialize_builtin",
                "ser_deser_init_serialize_modules",
                "ser_deser_init_serialize_builtin_modules",
                "ser_deser_new_world",
                "ser_deser_new_world_1_entity_w_tag",
                "ser_deser_new_world_1_entity_w_component",
                "ser_deser_new_world_1_entity_w_component_meta",
                "ser_deser_new_world_1_named_entity_w_tag",
                "ser_deser_new_world_1_named_entity_w_component",
                "ser_deser_new_world_1_named_entity_w_component_meta",
                "ser_deser_new_world_1_entity_w_tag_serialize_all",
                "ser_deser_new_world_1_entity_w_component_serialize_all",
                "ser_deser_new_world_1_entity_w_component_meta_serialize_all",
                "ser_deser_new_world_1_named_entity_w_tag_serialize_all",
                "ser_deser_new_world_1_named_entity_w_component_serialize_all",
                "ser_deser_new_world_1_named_entity_w_component_meta_serialize_all",
                "ser_deser_new_world_3_entities_w_component_meta",
                "ser_deser_new_world_3_entities_w_2_components_meta",
                "ser_deser_new_world_4_entities_2_tables_w_component_meta",
                "ser_deser_new_world_component_w_anon_entity_member",
                "ser_deser_new_world_component_w_named_entity_member",
                "ser_deser_new_world_component_w_anon_and_named_entity_member",
                "ser_deser_new_world_component_w_anon_entity_with_self",
                "ser_deser_new_world_component_w_named_entity_with_self",
                "ser_deser_new_world_2_entities_w_anon_parent",
                "ser_deser_new_world_2_entities_w_named_parent",
                "ser_deser_new_world_2_entities_w_anon_parent_w_cycle",
                "ser_deser_new_world_2_entities_w_named_parent_w_cycle",
                "ser_deser_restore_1_entity_to_empty_table",
                "ser_deser_restore_1_entity_to_non_empty_table",
                "ser_deser_restore_1_anon_entity_to_empty_table",
                "ser_deser_restore_1_anon_entity_to_non_empty_table",
                "ser_deser_restore_1_deleted_entity_to_empty_table",
                "ser_deser_restore_1_deleted_entity_to_non_empty_table",
                "ser_deser_restore_1_deleted_anon_entity_to_empty_table",
                "ser_deser_restore_1_deleted_anon_entity_to_non_empty_table",
                "ser_deser_restore_1_deleted_w_ref",
                "ser_deser_restore_1_deleted_anon_w_ref",
                "ser_deser_restore_1_deleted_w_cycle_ref",
                "ser_deser_restore_1_deleted_anon_w_cycle_ref",
                "ser_deser_restore_1_deleted_w_recycled",
                "ser_deser_restore_1_deleted_anon_w_recycled",
                "ser_deser_on_set_3_entities",
                "ser_deser_on_set_3_entities_2_restored",
                "ser_deser_on_set_3_entities_1_restored",
                "ser_deser_3_entities_after_remove_all",
                "ser_deser_3_entities_after_delete_with",
                "ser_deser_w_hooks",
                "ser_deser_large_data"
            ]
        }, {
            "id": "SerializeToJson",
            "testcases": [
                "struct_bool",
                "struct_byte",
                "struct_char",
                "struct_i8",
                "struct_i16",
                "struct_i32",
                "struct_i64",
                "struct_iptr",
                "struct_u8",
                "struct_u16",
                "struct_u32",
                "struct_u64",
                "struct_uptr",
                "struct_float",
                "struct_double",
                "struct_string",
                "struct_entity",
                "struct_entity_after_float",
                "struct_id",
                "struct_float_nan",
                "struct_float_inf",
                "struct_double_nan",
                "struct_double_inf",
                "struct_double_large",
                "struct_double_large_e",
                "struct_enum",
                "struct_bitmask",
                "struct_i32_i32",
                "struct_nested_i32",
                "struct_nested_i32_i32",
                "struct_2_nested_i32_i32",
                "struct_i32_array_3",
                "struct_struct_i32_array_3",
                "struct_struct_i32_i32_array_3",
                "struct_w_array_type_i32_i32",
                "struct_w_2_array_type_i32_i32",
                "struct_partial",
                "array_i32_3",
                "array_struct_i32_i32",
                "array_array_i32_3",
                "vector_i32_3",
                "vector_struct_i32_i32",
                "vector_array_i32_3"
            ]
        }, {
            "id": "SerializeEntityToJson",
            "testcases": [
                "serialize_empty",
                "serialize_w_name",
                "serialize_w_name_1_tag",
                "serialize_w_name_2_tags",
                "serialize_w_name_1_pair",
                "serialize_w_base",
                "serialize_w_base_override",
                "serialize_w_2_base",
                "serialize_w_nested_base",
                "serialize_w_1_component",
                "serialize_w_2_components",
                "serialize_w_primitive_component",
                "serialize_w_enum_component",
                "serialize_w_struct_and_enum_component",
                "serialize_w_invalid_enum_component",
                "serialize_w_type_info",
                "serialize_w_type_info_unit",
                "serialize_w_type_info_unit_quantity",
                "serialize_w_type_info_unit_over",
                "serialize_wo_private",
                "serialize_w_private",
                "serialize_w_label",
                "serialize_w_label_no_name",
                "serialize_w_id_labels",
                "serialize_w_brief",
                "serialize_w_brief_no_brief",
                "serialize_w_link",
                "serialize_w_link_no_link",
                "serialize_color",
                "serialize_w_doc_w_quotes",
                "serialize_union_relationship",
                "serialize_union_relationship_w_labels",
                "serialize_union_relationship_invalid_entity",
                "serialize_union_relationship_invalid_entity_w_labels",
                "serialize_w_union_property",
                "serialize_w_union_property",
                "serialize_from_core",
                "serialize_w_1_alert",
                "serialize_w_2_alerts",
                "serialize_w_child_alerts",
                "serialize_w_severity_filter_alert",
                "serialize_w_alerts_not_imported",
                "serialize_w_alerts_no_message",
                "serialize_refs_childof",
                "serialize_refs_custom",
                "serialize_refs_wildcard",
                "serialize_no_ids",
                "serialize_matches_filter",
                "serialize_matches_query",
                "serialize_matches_rule",
                "serialize_no_matches"
            ]
        }, {
            "id": "SerializeIterToJson",
            "testcases": [
                "serialize_1_comps_empty",
                "serialize_1_comps_2_ents_same_table",
                "serialize_1_tag_2_ents_same_table",
                "serialize_2_comps_2_ents_same_table",
                "serialize_1_tag_1_comp_2_ents_same_table",
                "serialize_1_tag_1_comp_4_ents_two_tables",
                "serialize_2_comps_1_owned_2_ents",
                "serialize_w_pair_wildcard",
                "serialize_w_var",
                "serialize_w_2_vars",
                "serialize_type_info_1_tags",
                "serialize_type_info_2_tags",
                "serialize_type_info_1_component",
                "serialize_type_info_2_components",
                "serialize_type_info_1_struct",
                "serialize_type_info_1_component_1_struct",
                "serialize_type_info_2_structs",
                "serialize_type_info_w_unit",
                "serialize_type_info_w_unit_quantity",
                "serialize_type_info_w_unit_over",
                "serialize_w_entity_label",
                "serialize_w_var_labels",
                "serialize_w_var_component",
                "serialize_w_optional_tag",
                "serialize_w_optional_component",
                "serialize_w_optional_reflected_component",
                "serialize_w_inout_filter_tag",
                "serialize_w_inout_filter_component",
                "serialize_w_inout_filter_reflected_component",
                "serialize_w_inout_out_tag",
                "serialize_w_inout_out_component",
                "serialize_w_inout_out_reflected_component",
                "serialize_component_from_var",
                "serialize_color",
                "serialize_ids",
                "serialize_ids_2_entities",
                "serialize_variable_ids",
                "serialize_variable_ids_2_entities",
                "serialize_invalid_value",
                "serialize_recycled_pair_id",
                "serialize_w_alert",
                "serialize_no_this_alert_imported",
                "serialize_paged_iterator",
                "serialize_paged_iterator_w_optional_component",
                "serialize_paged_iterator_w_optional_tag",
                "serialize_paged_iterator_w_vars",
                "serialize_w_offset",
                "serialize_labels_w_offset",
                "serialize_colors_w_offset",
                "serialize_anonymous_entities_w_offset",
                "serialize_table",
                "serialize_table_w_id_labels",
                "serialize_table_w_var_labels",
                "serialize_table_w_private",
                "serialize_world",
                "serialize_term_labels",
                "serialize_id_labels",
                "serialize_vars_for_query",
                "serialize_var_labels_for_query",
                "serialize_var_ids_for_query",
                "serialize_null_doc_name"
            ]
        }, {
            "id": "SerializeTypeInfoToJson",
            "testcases": [
                "bool",
                "byte",
                "char",
                "i8",
                "i16",
                "i32",
                "i64",
                "iptr",
                "u8",
                "u16",
                "u32",
                "u64",
                "uptr",
                "float",
                "double",
                "string",
                "entity",
                "id",
                "enum",
                "bitmask",
                "struct",
                "nested_struct",
                "array_type",
                "vector_type",
                "struct_array_i32_2",
                "struct_array_struct_2",
                "struct_array_type",
                "struct_vector_type",
                "custom_primitive_type",
                "custom_array_type",
                "custom_vector_type",
                "custom_struct_type",
                "struct_w_value_range",
                "struct_w_error_range",
                "struct_w_warning_range",
                "struct_w_error_and_warning_range",
                "struct_nested",
                "struct_nested_2_lvls",
                "struct_nested_2_members",
                "struct_nested_3_members"
            ]
        }, {
            "id": "MetaUtils",
            "testcases": [
                "struct_w_2_i32",
                "struct_w_2_bool",
                "struct_w_2_char",
                "struct_w_2_string",
                "struct_w_2_f32",
                "struct_w_2_f64",
                "struct_w_3_enum",
                "struct_w_3_enum_multiline",
                "struct_w_3_enum_w_assignment",
                "struct_w_4_bitmask",
                "struct_w_3_entities",
                "struct_w_2_array_3_i32",
                "struct_w_nested",
                "struct_w_2_nested",
                "enum_nospace",
                "struct_nospace",
                "identifier_w_underscore",
                "struct_w_ptr",
                "private_members",
                "enum_constant_w_name_prefix",
                "enum_constant_w_type_prefix",
                "enum_constant_w_name_type_prefix"
            ]
        }, {
            "id": "Vars",
            "testcases": [
                "declare_1_var",
                "declare_2_vars",
                "declare_vars_nested_scope",
                "declare_vars_2_scopes",
                "redeclare_var",
                "i32_expr_w_i32_var",
                "i32_expr_w_f32_var",
                "i32_expr_w_string_var",
                "string_expr_w_string_var",
                "struct_expr_w_i32_vars",
                "struct_expr_w_struct_var",
                "nested_struct_expr_w_struct_var",
                "declare_w_value",
                "redeclare_in_scope",
                "init_fini_vars"
            ]
        }, {
            "id": "DeserExprOperators",
            "testcases": [
                "add_2_int_literals",
                "add_2_int_literals_twice",
                "sub_2_int_literals",
                "mul_2_int_literals",
                "div_2_int_literals",
                "add_3_int_literals",
                "add_3_int_literals_twice",
                "sub_3_int_literals",
                "mul_3_int_literals",
                "div_3_int_literals",
                "int_to_bool",
                "bool_to_int",
                "bool_to_uint",
                "add_mul_3_int_literals",
                "sub_mul_3_int_literals",
                "div_mul_3_int_literals",
                "add_div_3_int_literals",
                "sub_div_3_int_literals",
                "mul_div_3_int_literals",
                "mul_add_mul_add_int_literals",
                "mul_sub_mul_sub_int_literals",
                "mul_div_mul_div_int_literals",
                "div_add_div_add_int_literals",
                "div_sub_div_sub_int_literals",
                "div_sub_div_mul_int_literals",
                "div_mul_div_mul_int_literals",
                "add_2_flt_literals",
                "sub_2_flt_literals",
                "mul_2_flt_literals",
                "div_2_flt_literals",
                "add_2_int_neg_literals",
                "sub_2_int_neg_literals",
                "mul_2_int_neg_literals",
                "div_2_int_neg_literals",
                "mul_lparen_add_add_rparen_int_literals",
                "mul_lparen_add_add_add_rparen_int_literals",
                "mul_lparen_add_add_rparen_add_int_literals",
                "lparen_add_add_rparen_mul_int_literals",
                "lparen_add_add_add_rparen_mul_int_literals",
                "double_paren_add_add",
                "double_paren_literal",
                "lparen_add_add_rparen_mul_lparen_add_add_rparen",
                "float_result_add_2_int_literals",
                "struct_result_add_2_int_literals",
                "struct_result_add_2_2_fields_int_literals",
                "struct_result_add_3_int_literals",
                "struct_result_lparen_int_rparen",
                "add_to_var",
                "add_var_to",
                "var_member",
                "bool_cond_and_bool",
                "bool_cond_or_bool",
                "int_cond_and_int",
                "int_cond_or_int",
                "bool_cond_and_int",
                "int_cond_and_bool",
                "bool_cond_or_int",
                "int_cond_or_bool",
                "cond_eq_bool",
                "cond_eq_int",
                "cond_neq_bool",
                "cond_neq_int",
                "cond_eq_bool_int",
                "cond_eq_int_flt",
                "cond_eq_cond_and",
                "cond_eq_cond_or",
                "cond_gt_bool",
                "cond_gt_int",
                "cond_gt_flt",
                "cond_gteq_bool",
                "cond_gteq_int",
                "cond_gteq_flt",
                "cond_lt_bool",
                "cond_lt_int",
                "cond_lt_flt",
                "cond_lteq_bool",
                "cond_lteq_int",
                "cond_lteq_flt",
                "min_lparen_int_rparen",
                "min_lparen_int_add_int_rparen",
                "min_var",
                "min_lparen_int_rparen_to_i64",
                "min_lparen_int_rparen_to_i32",
                "struct_w_min_var",
                "struct_w_min_lparen_int_rparen",
                "struct_w_min_lparen_var_rparen",
                "shift_left_int",
                "shift_right_int",
                "shift_left_int_add_int",
                "shift_left_int_mul_int",
                "add_int_shift_left_int",
                "mul_int_shift_left_int",
                "add_int_shift_left_int_add_int",
                "mul_int_shift_left_int_mul_int",
                "entity_expr",
                "entity_path_expr",
                "entity_parent_func",
                "entity_name_func",
                "entity_doc_name_func",
                "entity_chain_func",
                "var_parent_func",
                "var_name_func",
                "var_doc_name_func",
                "var_chain_func",
                "interpolate_string_w_i32_var",
                "interpolate_string_w_string_var",
                "interpolate_string_w_entity_var",
                "interpolate_string_w_id_var",
                "interpolate_string_w_var_not_found",
                "interpolate_string_w_entity_var_0",
                "interpolate_string_w_var_special_chars",
                "interpolate_string_w_var_before_after_text",
                "interpolate_string_w_curly_brackets_var",
                "interpolate_string_w_curly_brackets_expr",
                "interpolate_string_w_curly_brackets_expr_w_var",
                "interpolate_string_w_curly_brackets_expr_w_composite_var",
                "interpolate_string_w_escape_var_operator",
                "interpolate_string_w_escape_curly_brackets",
                "interpolate_string_w_func",
                "interpolate_string_w_func_chain",
                "iter_to_vars_no_data",
                "iter_to_vars_1_comp",
                "iter_to_vars_2_comps",
                "iter_to_vars_1_comp_1_tag",
                "iter_to_vars_w_1_query_var",
                "iter_to_vars_w_2_query_vars"
            ]
        }, {
            "id": "OpaqueTypes",
            "testcases": [
                "ser_i32_type_to_json",
                "ser_string_type_to_json",
                "ser_vec_i32_type_to_json",
                "ser_vec_string_type_to_json",
                "ser_struct_1_member",
                "ser_struct_2_members",
                "ser_struct_3_members",
                "deser_bool_from_json",
                "deser_char_from_json",
                "deser_int_from_json",
                "deser_uint_from_json",
                "deser_float_from_json",
                "deser_string_from_json",
                "deser_entity_from_json",
                "ser_deser_world_w_ser_opaque",
                "ser_deser_entity",
                "ser_deser_0_entity"
            ]
        }, {
            "id": "Misc",
            "testcases": [
                "primitive_from_stage",
                "enum_from_stage",
                "bitmask_from_stage",
                "struct_from_stage",
                "array_from_stage",
                "vector_from_stage",
                "opaque_from_stage",
                "unit_from_stage",
                "unit_prefix_from_stage",
                "quantity_from_stage",
                "primitive_from_defer",
                "enum_from_defer",
                "bitmask_from_defer",
                "array_from_defer",
                "vector_from_defer",
                "struct_from_defer",
                "opaque_from_defer",
                "unit_from_defer",
                "unit_prefix_from_defer",
                "quantity_from_defer",
                "primitive_from_readonly",
                "enum_from_readonly",
                "bitmask_from_readonly",
                "array_from_readonly",
                "vector_from_readonly",
                "struct_from_readonly",
                "opaque_from_readonly",
                "unit_from_readonly",
                "unit_prefix_from_readonly",
                "quantity_from_readonly",
                "primitive_from_suspend_defer",
                "enum_from_suspend_defer",
                "bitmask_from_suspend_defer",
                "array_from_suspend_defer",
                "vector_from_suspend_defer",
                "struct_from_suspend_defer",
                "opaque_from_suspend_defer",
                "unit_from_suspend_defer",
                "unit_prefix_from_suspend_defer",
                "quantity_from_suspend_defer"
            ]
        }]
    }
}
